	; SMPS Z80 Type 1 FM driver

	; Common include files
	.include "memory.z"
	.include "registers.z"
	.include "ym2612.z"

	; Local include files
	.include "structures.z"
	.include "variables.z"

	.org 0000h

_PROG0:
_reset:
	; Disable interrupts (twice because who knows why)
	di
	di

	; Set interrupt mode 1 (INT handler at 38h)
	im 1

	; Jump to start code
	jr start
; ---------------------------------------------------------------------------
	dc 2, 0

; =============== S U B R O U T I N E =======================================


waitForWrite:               ; CODE XREF: writeFMRegisters+11p ...
	ld  a, (FM1_ADDR)
	bit 7, a
	jr  nz, waitForWrite
	ret
; End of function waitForWrite


; =============== S U B R O U T I N E =======================================

; Attributes: thunk

j_writeFMRegisters:
	jp  writeFMRegisters
; End of function j_writeFMRegisters

; ---------------------------------------------------------------------------
	dc 5, 0

; =============== S U B R O U T I N E =======================================

; Attributes: thunk

j_writeDataToFM1:
	jp  writeDataToFM1
; End of function j_writeDataToFM1

; ---------------------------------------------------------------------------
	dc 5, 0

; =============== S U B R O U T I N E =======================================


sub_20:
	ld hl, PROG2_START

loc_23:
	ld b, 0
	jp loc_419
; End of function sub_20


; =============== S U B R O U T I N E =======================================


dereferencePointerTable:
	ld  c, a
	ld  b, 0
	add hl, bc
	add hl, bc
	nop
	nop
	nop
; End of function dereferencePointerTable


; =============== S U B R O U T I N E =======================================


dereferencePointer:
	ld  a, (hl)
	inc hl
	ld  h, (hl)
	ld  l, a
	ret
; End of function dereferencePointer

; ---------------------------------------------------------------------------
	dc 3, 0

; =============== S U B R O U T I N E =======================================


vblankHandler:
	; Save registers
	push    af
	push    bc
	push    de
	push    hl

	; Don't do anything if delayFrames is nonzero
	ld  hl, delayFrames
	ld  a, (hl)
	or  a
	jr  z, loc_46

	dec (hl)
	jr  loc_4D
; ---------------------------------------------------------------------------

loc_46:                 ; CODE XREF: vblankHandler+9j
	; Increment the frame counter
	ld  hl, frameCounter
	inc (hl)

	; Do stuff
	call performFrameUpdate

loc_4D:                 ; CODE XREF: vblankHandler+Cj
	; Restore registers
	pop hl
	pop de
	pop bc
	pop af

	ret
; End of function vblankHandler

; ---------------------------------------------------------------------------

start:                  ; CODE XREF: ROM:0004j
	; Set the initial stack pointer
	ld sp, STACK_INIT

	ld a, 3
	ld (delayFrames), a

startupLoop:           ; CODE XREF: ROM:005Fj
	ei
	ld a, (delayFrames)
	or a
	jp nz, startupLoop

	call initialize

mainLoop:              ; CODE XREF: ROM:0069j
	ei
	call processCommandQueue
	jr  mainLoop

; =============== S U B R O U T I N E =======================================


performFrameUpdate:                 ; CODE XREF: vblankHandler+12p
	call handlePause
	call handleTempo
	call handleFade
	call sub_48E
	call updateSfxTracks

	; Set driver to music mode
	xor a
	ld (driverMode), a

	ld   ix, struct_1C40
	bit  TRACK.updateBit, (ix + TRACK.flags)
	call nz, sub_7EE

	ld b, 6
	ld ix, struct_1C70
; End of function performFrameUpdate


; =============== S U B R O U T I N E =======================================


trackUpdateLoop:                 ; CODE XREF: trackUpdateLoop+Ej updateSfxTracks+Ep ...
	push bc

	bit  TRACK.updateBit, (ix + TRACK.flags)
	call nz, updateTrack

	ld  de, TRACK.size
	add ix, de

	pop  bc
	djnz trackUpdateLoop

	ret
; End of function trackUpdateLoop


; =============== S U B R O U T I N E =======================================


updateSfxTracks:                 ; CODE XREF: performFrameUpdate+Cp
	call sub_48E

	; Set driver to SFX mode
	ld a, 01h
	ld (driverMode), a

	ld   ix, struct_1D90
	ld   b, 3
	call trackUpdateLoop

	; Set driver to Special SFX mode
	ld a, 80h
	ld (driverMode), a

	ld b, 2
	ld ix, struct_1E20
	jr trackUpdateLoop
; End of function updateSfxTracks


; =============== S U B R O U T I N E =======================================


updateTrack:                 ; CODE XREF: trackUpdateLoop+5p
	call delayTrack
	jr   nz, loc_DA

	call sub_150

	bit TRACK.flag4, (ix + TRACK.flags)
	ret nz

	call sub_2A8
	call sub_3D9
	call sub_2D3
	call setFmFrequency
	jp  setKeyOn
; ---------------------------------------------------------------------------

loc_DA:                 ; CODE XREF: updateTrack+3j
	call sub_25B
	bit  4, (ix + 0)
	ret  nz

	call sub_279
	ld   a, (ix + 1Eh)
	or   a
	jr   z, loc_F1

	dec (ix + 1Eh)
	jp  z, setKeyOff

loc_F1:                 ; CODE XREF: updateTrack+2Bj
	call sub_3D9
	bit  6, (ix + 0)
	ret  nz

	call sub_2D3
; End of function updateTrack


; =============== S U B R O U T I N E =======================================


setFmFrequency:                 ; CODE XREF: updateTrack+16p
	bit 2, (ix + 0)
	ret nz

	bit 0, (ix + 0)
	jp  nz, loc_111

loc_108:                ; CODE XREF: setFmFrequency+1Aj
	ld  a, YM_FREQL
	ld  c, h
	rst j_writeFMRegisters

	ld  a, YM_FREQH
	ld  c, l
	rst j_writeFMRegisters

	ret
; ---------------------------------------------------------------------------

loc_111:                ; CODE XREF: setFmFrequency+9j
	ld a, (ix + 1)
	cp 2
	jr nz, loc_108

	call sub_140
	exx

	ld hl, channelCFreq
	ld b, 4

	loc_121:                ; CODE XREF: setFmFrequency+40j
		ld   a, (hl)
		push af

		inc hl
		exx

		ex  de, hl
		ld  c, (hl)
		inc hl
		ld  b, (hl)
		inc hl
		ex  de, hl
		ld  l, (ix + 0Dh)
		ld  h, (ix + 0Eh)
		add hl, bc

		pop  af
		push af

		ld  c, h
		rst j_writeDataToFM1

		pop af

		sub 4
		ld  c, l
		rst j_writeDataToFM1

		exx
		djnz loc_121

	exx
	ret
; End of function setFmFrequency


; =============== S U B R O U T I N E =======================================


sub_140:                ; CODE XREF: setFmFrequency+1Cp
	ld  de, 1C2Ah

	ld  a, (driverMode)
	or  a
	ret z

	ld  de, 1C1Ah
	ret p

	ld  de, 1C22h
	ret
; End of function sub_140


; =============== S U B R O U T I N E =======================================


sub_150:                ; CODE XREF: updateTrack+5p
	ld e, (ix + TRACK.addrlo_3)
	ld d, (ix + TRACK.addrhi_4)

	res TRACK.flag1, (ix + TRACK.flags)
	res TRACK.flag4, (ix + TRACK.flags)

loc_15E:
	ld  a, (de)
	inc de
	cp  0E0h
	jp  nc, handleCommandByte

	ex   af, af'
	call setKeyOff
	call sub_215
	ex   af, af'

	bit 3, (ix + 0)
	jp  nz, loc_1BD

	or a
	jp p, loc_1E3

	sub 81h
	jp  p, loc_182

	call sub_3AC
	jr   loc_1A3
; ---------------------------------------------------------------------------

loc_182:                ; CODE XREF: sub_150+2Aj
	add  a, (ix + 5)
	push de
	ld   d, 8
	ld   e, 0Ch
	ex   af, af'
	xor  a

loc_18C:                ; CODE XREF: sub_150+42j
	ex  af, af'
	sub e
	jr  c, loc_194
	ex  af, af'

	add a, d
	jr  loc_18C
; ---------------------------------------------------------------------------

loc_194:                ; CODE XREF: sub_150+3Ej
	add a, e
	ld  hl, data_7D6
	rst dereferencePointerTable

	ex  af, af'
	or  h
	ld  h, a
	pop de

	ld  (ix + 0Dh), l
	ld  (ix + 0Eh), h

loc_1A3:                ; CODE XREF: sub_150+30j
	bit 5, (ix + 0)
	jr  nz, loc_1B6

	ld  a, (de)
	or  a
	jp  p, loc_1E2

	ld  a, (ix + 0Ch)
	ld  (ix + 0Bh), a
	jr  loc_1E9
; ---------------------------------------------------------------------------

loc_1B6:                ; CODE XREF: sub_150+57j
	ld  a, (de)
	inc de
	ld  (ix + 10h), a
	jr  loc_1E1
; ---------------------------------------------------------------------------

loc_1BD:                ; CODE XREF: sub_150+21j
	ld  h, a
	ld  a, (de)
	inc de
	ld  l, a
	or  h
	jr  z, loc_1D0

	ld  a, (ix + 5)
	ld  b, 0
	or  a
	jp  p, loc_1CE
	dec b

loc_1CE:                ; CODE XREF: sub_150+7Aj
	ld  c, a
	add hl, bc

loc_1D0:                ; CODE XREF: sub_150+72j
	ld  (ix + 0Dh), l
	ld  (ix + 0Eh), h
	bit 5, (ix + 0)
	jr  z, loc_1E1

	ld  a, (de)
	inc de
	ld  (ix + 10h), a

loc_1E1:                ; CODE XREF: sub_150+6Bj sub_150+8Aj
	ld  a, (de)

loc_1E2:                ; CODE XREF: sub_150+5Bj
	inc de

loc_1E3:                ; CODE XREF: sub_150+25j sub_7F5+69j
	call    sub_20B
	ld  (ix + 0Ch), a

loc_1E9:                ; CODE XREF: sub_150+64j sub_7F5+73j
	ld  (ix + 3), e
	ld  (ix + 4), d
	ld  a, (ix + 0Ch)
	ld  (ix + 0Bh), a

	bit 1, (ix + 0)
	ret nz

	xor a
	ld (ix + 25h), a
	ld (ix + 22h), a
	ld (ix + 17h), a

	ld  a, (ix + 1Fh)
	ld  (ix + 1Eh), a
	ret
; End of function sub_150


; =============== S U B R O U T I N E =======================================


sub_20B:                ; CODE XREF: sub_150:loc_1E3p
	ld  b, (ix + 2)
	dec b
	ret z

	ld c, a

	loc_211:
		add  a, c
		djnz loc_211

	ret
; End of function sub_20B


; =============== S U B R O U T I N E =======================================


sub_215:                ; CODE XREF: sub_150+19p
	ld  a, (ix + 11h)
	dec a
	ret m

	jr  nz, loc_257

	bit TRACK.flag1, (ix + TRACK.flags)
	ret nz

loc_221:                ; CODE XREF: sub_25B+6j
	dec (ix + 16h)
	ret nz

	exx
	ld  a, (ix + 15h)
	ld  (ix + 16h), a

	ld  a, (ix + 12h)
	ld  hl, data_263
	rst dereferencePointerTable

	ld  e, (ix + 13h)
	inc (ix + 13h)
	ld  a, (ix + 14h)
	dec a
	cp  e
	jr  nz, loc_24E

	dec (ix + 13h)
	ld  a, (ix + 11h)
	cp  2
	jr  z, loc_24E

	ld  (ix + 13h), 0

loc_24E:                ; CODE XREF: sub_215+29j sub_215+33j
	ld  d, 0
	add hl, de
	ex  de, hl
	call cmd_E0

	exx
	ret
; ---------------------------------------------------------------------------

loc_257:                ; CODE XREF: sub_215+5j
	xor a
	ld  (ix + 13h), a
; End of function sub_215


; =============== S U B R O U T I N E =======================================


sub_25B:                ; CODE XREF: updateTrack:loc_DAp
	ld  a, (ix + 11h)
	sub 2
	ret m
	jr  loc_221
; End of function sub_25B

; ---------------------------------------------------------------------------
data_263:
	dw byte_26B
	dw byte_26C
	dw byte_26D
	dw byte_26E

byte_26B:
	db 0C0h

byte_26C:
	db  80h

byte_26D:
	db 0C0h

byte_26E:
	db  40h
	db 0C0h
	db  80h

; =============== S U B R O U T I N E =======================================


delayTrack:                ; CODE XREF: updateTrackp sub_7EEp
	ld  a, (ix + TRACK.trackDelay)
	dec a
	ld  (ix + TRACK.trackDelay), a
	ret
; End of function delayTrack


; =============== S U B R O U T I N E =======================================


sub_279:                ; CODE XREF: updateTrack+24p
	ld  a, (ix + 18h)
	or  a
	ret z
	ret m

	dec a
	ld  c, 10
	rst sub_20
	rst dereferencePointerTable
	call sub_37B

	ld  h, (ix + 1Dh)
	ld  l, (ix + 1Ch)

	ld  de, instrumentVolume
	ld  b, 4
	ld  c, (ix + 19h)

	loc_295:
		push af
		sra c
		push bc

		jr  nc, loc_2A1

		add a, (hl)
		and 7Fh
		ld  c, a
		ld  a, (de)
		rst j_writeFMRegisters

	loc_2A1:
		pop bc
		inc de
		inc hl
		pop af
		djnz loc_295

	ret
; End of function sub_279


; =============== S U B R O U T I N E =======================================


sub_2A8:                ; CODE XREF: updateTrack+Dp
	bit 7, (ix + 7)
	ret z

	bit 1, (ix + 0)
	ret nz

	ld  e, (ix + 20h)
	ld  d, (ix + 21h)

	push ix
	pop  hl

	ld  b, 0
	ld  c, 24h
	add hl, bc
	ex  de, hl
	ldi
	ldi
	ldi
	ld  a, (hl)
	srl a
	ld  (de), a
	xor a
	ld  (ix + 22h), a
	ld  (ix + 23h), a
	ret
; End of function sub_2A8


; =============== S U B R O U T I N E =======================================


sub_2D3:                ; CODE XREF: updateTrack+13p updateTrack+3Bp
	ld  a, (ix + 7)
	or  a
	ret z

	cp  80h
	jr  nz, loc_324

	dec (ix + 24h)
	ret nz

	inc (ix + 24h)
	push    hl
	ld  l, (ix + 22h)
	ld  h, (ix + 23h)
	dec (ix + 25h)
	jr  nz, loc_30F

	ld   e, (ix + 20h)
	ld   d, (ix + 21h)
	push de
	pop  iy

	ld  a, (iy + 1)
	ld  (ix + 25h), a
	ld  a, (ix + 26h)
	ld  c, a
	and 80h
	rlca
	neg
	ld  b, a
	add hl, bc
	ld  (ix + 22h), l
	ld  (ix + 23h), h

loc_30F:
	pop bc
	add hl, bc
	dec (ix + 27h)
	ret nz

	ld  a, (iy + 3)
	ld  (ix + 27h), a
	ld  a, (ix + 26h)
	neg
	ld  (ix + 26h), a
	ret
; ---------------------------------------------------------------------------

loc_324:
	dec a
	ex  de, hl
	ld  c, 8
	rst sub_20
	rst dereferencePointerTable
	jr  loc_32F
; ---------------------------------------------------------------------------

loc_32C:
	ld  (ix + 25h), a

loc_32F:
	push    hl
	ld  c, (ix + 25h)
	call    sub_41E
	pop hl

	bit 7, a
	jp  z, loc_369

	cp  82h
	jr  z, loc_352

	cp  80h
	jr  z, loc_356

	cp  84h
	jr  z, loc_359

	ld  h, 0FFh
	jr  nc, loc_36B

	set 6, (ix + 0)
	pop hl
	ret
; ---------------------------------------------------------------------------

loc_352:
	inc bc
	ld  a, (bc)
	jr  loc_32C
; ---------------------------------------------------------------------------

loc_356:
	xor a
	jr  loc_32C
; ---------------------------------------------------------------------------

loc_359:
	inc bc
	ld  a, (bc)
	add a, (ix + 22h)
	ld  (ix + 22h), a
	inc (ix + 25h)
	inc (ix + 25h)
	jr  loc_32F
; ---------------------------------------------------------------------------

loc_369:
	ld  h, 0

loc_36B:
	ld  l, a
	ld  b, (ix + 22h)
	inc b
	ex  de, hl

	loc_371:
		add  hl, de
		djnz loc_371

	inc (ix + 25h)
	ret
; End of function sub_2D3

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_37B

loc_378:                ; CODE XREF: sub_37B+1Aj sub_37B+25j
	ld (ix + 17h), a
; END OF FUNCTION CHUNK FOR sub_37B

; =============== S U B R O U T I N E =======================================


sub_37B:                ; CODE XREF: sub_279+Bp

; FUNCTION CHUNK AT 0378 SIZE 00000003 BYTES

	push    hl
	ld  c, (ix + 17h)
	call    sub_41E
	pop hl

	bit 7, a
	jr  z, loc_3A8

	cp  83h
	jr  z, loc_397

	cp  81h
	jr  z, loc_3A2

	cp  80h
	jr  z, loc_39F

	inc bc
	ld  a, (bc)
	jr  loc_378
; ---------------------------------------------------------------------------

loc_397:                ; CODE XREF: sub_37B+Ej
	set 4, (ix + 0)
	pop hl
	jp  sub_3AC
; ---------------------------------------------------------------------------

loc_39F:                ; CODE XREF: sub_37B+16j
	xor a
	jr  loc_378
; ---------------------------------------------------------------------------

loc_3A2:                ; CODE XREF: sub_37B+12j
	pop hl
	set 4, (ix + 0)
	ret
; ---------------------------------------------------------------------------

loc_3A8:                ; CODE XREF: sub_37B+Aj
	inc (ix + 17h)
	ret
; End of function sub_37B


; =============== S U B R O U T I N E =======================================


sub_3AC:                ; CODE XREF: sub_150+2Dp sub_37B+21j
	set TRACK.flag4, (ix + TRACK.flags)
	ret
; End of function sub_3AC

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR updateTrack

setKeyOn:                ; CODE XREF: updateTrack+19j
	ld  a, (ix + 0Dh)
	or  (ix + 0Eh)
	ret z

	ld  a, (ix + TRACK.flags)
	and 6
	ret nz

	ld  a, (ix + TRACK.channel)
	or  0F0h
	ld  c, a
	ld  a, YM_KEYONOFF
	rst j_writeDataToFM1
	ret
; END OF FUNCTION CHUNK FOR updateTrack

; =============== S U B R O U T I N E =======================================


setKeyOff:                ; CODE XREF: updateTrack+30j sub_150+16p ...
	ld  a, (ix + TRACK.flags)
	and 6
	ret nz
; End of function setKeyOff


; =============== S U B R O U T I N E =======================================


setFmKeyOff:                ; CODE XREF: muteChannel+Dj
	; Clear flag in bit 6
	res TRACK.flag6, (ix + TRACK.flags)

	ld  c, (ix + TRACK.channel)
	ld  a, YM_KEYONOFF
	rst j_writeDataToFM1
	ret

; =============== S U B R O U T I N E =======================================


sub_3D9:                ; CODE XREF: updateTrack+10p updateTrack:loc_F1p
	ld b, 0

	ld a, (ix + 10h)
	or a
	jp p, loc_3E3

	dec b

loc_3E3:
	ld h, (ix + TRACK.byte_E)
	ld l, (ix + TRACK.byte_D)
	ld c, a
	add hl, bc
	ex  de, hl
	ld  a, 7
	and d
	ld  b, a
	ld  c, e
	or  a
	ld  hl, 283h
	sbc hl, bc
	jr  c, loc_3FF

	ld  hl, -57Bh
	add hl, de
	jr  loc_40D
; ---------------------------------------------------------------------------

loc_3FF:
	or  a
	ld  hl, 508h
	sbc hl, bc
	jr  nc, loc_40C

	ld  hl, 57Ch
	add hl, de
	ex  de, hl

loc_40C:
	ex  de, hl

loc_40D:
	bit 5, (ix + 0)
	ret z

	ld (ix + TRACK.byte_E), h
	ld (ix + TRACK.byte_D), l
	ret
; End of function sub_3D9

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_20

loc_419:                ; CODE XREF: sub_20+5j
	add hl, bc
	ex  af, af'
	rst dereferencePointer
	ex  af, af'
	ret
; END OF FUNCTION CHUNK FOR sub_20

; =============== S U B R O U T I N E =======================================


sub_41E:                ; CODE XREF: sub_2D3+60p sub_37B+4p
	ld  b, 0

	add hl, bc
	ld  c, l
	ld  b, h

	ld  a, (bc)
	ret
; End of function sub_41E


; =============== S U B R O U T I N E =======================================


sub_425:
	ld hl, (1C37h)

	ld a, (driverMode)
	or a
	jr z, loc_434

	ld l, (ix + 2Ah)
	ld h, (ix + 2Bh)

loc_434:
	xor a

	or b
	jr z, locret_43E

	ld de, 19h

	loc_43B:
		add hl, de
		djnz loc_43B

locret_43E:
	ret
; End of function sub_425


; =============== S U B R O U T I N E =======================================


writeFMRegisters:                ; CODE XREF: j_writeFMRegistersj
	; Jump down if writing to channels 4-6
	bit 2, (ix + TRACK.channel)
	jr  nz, loc_456

	bit TRACK.flag2, (ix + TRACK.flags)
	ret nz

	; Adjust address for the correct channel
	add a, (ix + TRACK.channel)

writeDataToFM1:         ; CODE XREF: j_writeDataToFM1j
	ld  (FM1_ADDR), a
	rst waitForWrite

	ld  a, c
	ld  (FM1_DATA), a
	ret
; ---------------------------------------------------------------------------

loc_456:                ; CODE XREF: writeFMRegisters+4j
	bit TRACK.flag2, (ix + TRACK.flags)
	ret nz

	; Adjust address for the correct channel
	add a, (ix + TRACK.channel)
	sub 4

writeDataToFM2:         ; CODE XREF: handlePause+21p
	ld  (FM2_ADDR), a
	rst waitForWrite

	ld  a, c
	ld  (FM2_DATA), a
	ret
; End of function writeFMRegisters


; =============== S U B R O U T I N E =======================================


writeInstrumentData:                ; CODE XREF: sub_7F5+5Bp
	ld de, instrumentRegisters

	ld  c, (ix + 0Ah)
	ld  a, YM_CHENABLE
	rst j_writeFMRegisters

	call sub_488

	ld (ix + 1Bh), a

	ld b, 20
	loc_47A:
		call sub_488
		djnz loc_47A

	ld (ix + 1Ch), l
	ld (ix + 1Dh), h
	jp sub_B67
; End of function writeInstrumentData


; =============== S U B R O U T I N E =======================================


sub_488:
	; Fetch register address
	ld  a, (de)
	inc de

	; Fetch register value
	ld  c, (hl)
	inc hl

	rst j_writeFMRegisters
	ret
; End of function sub_488


; =============== S U B R O U T I N E =======================================


sub_48E:                ; CODE XREF: performFrameUpdate+9p updateSfxTracksp
	ld a, (flags_1C09)

loc_491:
	bit 7, a
	jp  z, initialize

	cp 90h
	jp c, loc_4DC

	cp 94h
	jp c, loc_54F

	cp 0E0h
	jp c, loc_545

	cp 0F9h
	jp nc, initialize

	sub 0E0h

	ld  hl, addr_4B5
	rst dereferencePointerTable

	; Zero out byte_1C18
	xor a
	ld (byte_1C18), a

	jp  (hl)
; ---------------------------------------------------------------------------
addr_4B5:
	dw loc_6A8
	dw initialize
	dw loc_4BB

loc_4BB:
	ld ix, struct_1E20
	ld b, 2

	; Put driver in Special SFX mode
	ld a, 80h
	ld (driverMode), a

	loc_4C6:
		push bc

		bit TRACK.updateBit, (ix + TRACK.flags)
		call nz, loc_4D7

		ld de, TRACK.size
		add ix, de

		pop bc
		djnz loc_4C6

	ret

loc_4D7:
	push hl
	push hl
	jp cmd_F2


; ---------------------------------------------------------------------------

loc_4DC:                ; CODE XREF: sub_48E+Aj
	sub 81h
	ret m

	push af
	call initialize
	pop  af

	ld  c, 4
	rst sub_20
	rst dereferencePointerTable

	push hl
	push hl

	rst dereferencePointer
	ld  (1C37h), hl

	pop hl
	pop iy

	ld a, (iy + 5)
	ld (tempoTimeout), a
	ld (byte_1C14), a

	ld  de, 6
	add hl, de
	ld  (word_1C33), hl

	ld  hl, data_537
	ld  (word_1C35), hl

	ld  de, struct_1C40
	ld  b, (iy + 2)
	ld  a, (iy + 4)

	loc_510:
		push bc

		ld  hl, (word_1C35)
		ldi
		ldi
		ld  (de), a
		inc de
		ld  (word_1C35), hl
		ld  hl, (word_1C33)
		ldi
		ldi
		ldi
		ldi
		ld  (word_1C33), hl
		call sub_5F5

		pop  bc
		djnz loc_510
; End of function sub_48E

; START OF FUNCTION CHUNK FOR initialize

loc_531:                ; CODE XREF: sub_48E+147j handlePause+36j ...
	ld a, 80h
	ld (flags_1C09), a
	ret
; END OF FUNCTION CHUNK FOR initialize
; ---------------------------------------------------------------------------
data_537:
	db 80h, 2
	db 80h, 0
	db 80h, 1
	db 80h, 4
	db 80h, 5
	db 80h, 6
	db 80h, 2
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_48E

loc_545:                ; CODE XREF: sub_48E+14j
	sub 0D0h
	ex  af, af'
	ld  a, 80h
	ld  hl, 0D08h
	jr  loc_556
; ---------------------------------------------------------------------------

loc_54F:                ; CODE XREF: sub_48E+Fj
	sub 90h
	ex  af, af'
	xor a

	ld  hl, PROG1_START

loc_556:                ; CODE XREF: sub_48E+BFj
	ld  (driverMode), a
	ex  af, af'
	rst dereferencePointerTable

	push hl
	rst dereferencePointer

	ld  (1C39h), hl
	xor a
	ld  (1C15h), a
	pop hl

	push hl
	pop  iy

	ld  a, (iy + 2)
	ld  (1C3Bh), a
	ld  de, 4
	add hl, de
	ld  b, (iy + 3)

loc_575:                ; CODE XREF: sub_48E+145j
	push bc
	push hl

	inc  hl
	ld   c, (hl)
	call setIndexRegisters

	set 2, (hl)
	push    ix

	ld  a, (driverMode)
	or  a
	jr  z, loc_589

	pop hl
	push iy

loc_589:                ; CODE XREF: sub_48E+F6j
	pop de
	pop hl
	ldi
	ld  a, (de)
	cp  2
	call z, resetChannelCMode

	ldi
	ld  a, (1C3Bh)
	ld  (de), a
	inc de
	ldi
	ldi
	ldi
	ldi
	call sub_5F5

	bit 7, (ix + 0)
	jr  z, loc_5B7

	ld  a, (ix + 1)
	cp  (iy + 1)
	jr  nz, loc_5B7

	set 2, (iy + 0)

loc_5B7:                ; CODE XREF: sub_48E+11Bj sub_48E+123j
	push    hl
	ld  hl, (1C39h)
	ld  a, (driverMode)
	or  a
	jr  z, loc_5C5

	push iy
	pop  ix

loc_5C5:                ; CODE XREF: sub_48E+131j
	ld (ix + 2Ah), l
	ld (ix + 2Bh), h
	call setKeyOff
	call disableSSG

	pop  hl
	pop  bc
	djnz loc_575

	jp  loc_531
; END OF FUNCTION CHUNK FOR sub_48E

; =============== S U B R O U T I N E =======================================


setIndexRegisters:                ; CODE XREF: sub_48E+EBp
	ld  a, c
	sub 2
	ld (1C32h), a

	; Set value of ix - SFX track
	push af
	ld   hl, addr_619
	rst  dereferencePointerTable
	push hl
	pop  ix
	pop  af

	; Set value of iy - Special SFX track
	push af
	ld   hl, addr_60F
	rst  dereferencePointerTable
	push hl
	pop  iy
	pop  af

	; Set value of hl - Music track
	ld  hl, addr_623
	rst dereferencePointerTable
	ret
; End of function setIndexRegisters


; =============== S U B R O U T I N E =======================================


sub_5F5:                ; CODE XREF: sub_48E+9Dp sub_48E+114p
	ex  af, af'

	; Set a = 0
	xor a
	ld (de), a
	inc de
	ld (de), a
	inc de

	ex  af, af'
; End of function sub_5F5


; =============== S U B R O U T I N E =======================================


sub_5FC:                ; CODE XREF: sub_7F5+3Ep
	ex de, hl

	ld (hl), 30h
	inc hl

	ld (hl), 0C0h
	inc hl

	ld (hl), 1

	ld b, 24h
	loc_607:
		inc hl
		ld (hl), 0
		djnz loc_607

	inc hl

	ex de, hl
	ret
; End of function sub_5FC

; ---------------------------------------------------------------------------
addr_60F: ; iy - Special SFX
	dw struct_1E20
	dw struct_1E20
	dw struct_1E20
	dw struct_1E20
	dw 1E50h

addr_619: ; ix - SFX
	dw struct_1D90
	dw 1DC0h
	dw 1DC0h
	dw 1DC0h
	dw 1DF0h

addr_623: ; hl - Music
	dw 1D60h
	dw 1D00h
	dw 1D00h
	dw 1D00h
	dw 1D30h

; =============== S U B R O U T I N E =======================================


handlePause:                ; CODE XREF: performFrameUpdatep
	; Return if pauseMode is zero
	ld  hl, pauseMode
	ld  a, (hl)
	or  a
	ret z

	; Jump if pauseMode is negative
	jp  m, loc_666

	pop de
	dec a
	ret nz

	ld  (hl), 2

	push bc
	push af

	; Turn off channels 1-3
	ld b, 3
	ld a, YM_CHENABLE
	ld c, 0

	loc_643:
		push af
		rst  j_writeDataToFM1
		pop  af
		inc  a
		djnz loc_643

	; Turn off channels 4-6
	ld b, 3
	ld a, YM_CHENABLE

	loc_64D:
		push af
		call writeDataToFM2
		pop  af
		inc  a
		djnz loc_64D

	; Set key-off for all channels
	ld b, 7
	ld a, YM_KEYONOFF
	ld c, 0

	loc_65B:
		push af
		rst  j_writeDataToFM1
		inc  c
		pop  af
		djnz loc_65B

	pop af
	pop bc

	jp  loc_531
; ---------------------------------------------------------------------------

loc_666:                ; CODE XREF: handlePause+6j
	xor a
	ld  (hl), a

	ld a, (fadeCounter)
	or a
	jp nz, initialize

	ld ix, struct_1C70
	ld b, 6

	loc_675:
		ld a, (byte_1C11)
		or a
		jr nz, loc_681

		bit TRACK.updateBit, (ix + TRACK.flags)
		jr  z, loc_687

	loc_681:
		ld  c, (ix + TRACK.byte_A)
		ld  a, YM_CHENABLE
		rst j_writeFMRegisters

	loc_687:
		; Advance to the next object
		ld  de, TRACK.size
		add ix, de
		djnz    loc_675

	ld ix, struct_1D90
	ld b, 5

	loc_694:
		bit TRACK.updateBit, (ix + TRACK.flags)
		jr  z, loc_6A0

		ld  c, (ix + TRACK.byte_A)
		ld  a, YM_CHENABLE
		rst j_writeFMRegisters

	loc_6A0:
		; Advance to the next object
		ld  de, TRACK.size
		add ix, de
		djnz    loc_694

	ret
; End of function handlePause

; ---------------------------------------------------------------------------
loc_6A8:
	ld a, 18h
	ld (fadeCounter), a

	ld a, 2
	ld (byte_1C0F), a
	ld (byte_1C0E), a

; =============== S U B R O U T I N E =======================================


sub_6B5:                ; CODE XREF: handleFade+6p
	xor a
	ld (struct_1C40), a
	jp loc_531
; End of function sub_6B5


; =============== S U B R O U T I N E =======================================


handleFade:                ; CODE XREF: performFrameUpdate+6p
	; Return if fadeCounter is zero
	ld  hl, fadeCounter
	ld  a, (hl)
	or  a
	ret z

	; If fadeCounter is negative
	call m, sub_6B5

	res 7, (hl)

	ld  a, (byte_1C0F)
	dec a
	jr  z, loc_6D1

	ld  (byte_1C0F), a

	ret
; ---------------------------------------------------------------------------

loc_6D1:                ; CODE XREF: handleFade+Fj
	ld  a, (byte_1C0E)
	ld  (byte_1C0F), a

	; Decrement fadeCounter
	ld  a, (fadeCounter)
	dec a
	ld  (fadeCounter), a

	jr  z, initialize
	ld  ix, struct_1C40
	ld  b, 8

	loc_6E6:                ; CODE XREF: handleFade+49j
		inc (ix + TRACK.byte_6)
		jp  p, loc_6F1

		dec (ix + TRACK.byte_6)
		jr  loc_700
	; ---------------------------------------------------------------------------

	loc_6F1:                ; CODE XREF: handleFade+2Dj
		bit TRACK.updateBit, (ix + TRACK.flags)
		jr  z, loc_700

		bit TRACK.flag2, (ix + TRACK.flags)
		jr  nz, loc_700

		call    sub_B67

	loc_700:                ; CODE XREF: handleFade+33j handleFade+39j ...
		ld  de, TRACK.size
		add ix, de
		djnz    loc_6E6

	ret
; End of function handleFade


; =============== S U B R O U T I N E =======================================


initialize:                ; CODE XREF: ROM:0062p sub_48E+5j ...
	; Clear out a bunch of RAM (1C09h - 1E80h)
	ld hl, flags_1C09
	ld de, CMD_BUFFER
	ld bc, 630
	ld (hl), 0
	ldir

	; Set up the main index register
	ld ix, data_537

	; Turn off all 6 FM channels
	ld b, 6
	loc_71B:
		push bc

		call muteChannel
		call disableSSG

		; Go to the next channel
		inc ix
		inc ix

		pop  bc
		djnz loc_71B

	ld b, 7

	; Clear fade step counter
	xor a
	ld (fadeCounter), a

resetChannelCMode:                ; CODE XREF: sub_48E+102p sub_7F5+62p
	; Set CH3/6 to normal mode, enable timers A and B
	ld  a, 0Fh
	ld  (timerStatus), a
	ld  c, a

	ld  a, YM_TMRCTRL
	rst j_writeDataToFM1

	jp  loc_531
; End of function initialize


; =============== S U B R O U T I N E =======================================


disableSSG:                ; CODE XREF: sub_48E+140p initialize+17p
	ld a, YM_SSG
	ld c, 0
	jp writeToAllOperators
; End of function disableSSG


; =============== S U B R O U T I N E =======================================


handleTempo:                ; CODE XREF: performFrameUpdate+3p
	ld  hl, tempoTimeout
	ld  a, (hl)
	or  a
	ret z

	dec (hl)
	ret nz

	ld a, (byte_1C14)
	ld (hl), a

	ld hl, tbl_1C4B
	ld de, TRACK.size

	ld b, 7
	loc_756:
		inc (hl)
		add hl, de
		djnz loc_756

	ret
; End of function handleTempo


; =============== S U B R O U T I N E =======================================


processCommandQueue:                ; CODE XREF: ROM:0066p
	; Store the refresh counter
	ld a, r
	ld (refreshCount), a

	; Load address of command buffer
	ld de, CMD_BUFFER

	; Process commands
	call processCommand
	call processCommand
; End of function processCommandQueue


; =============== S U B R O U T I N E =======================================


processCommand:
	; Read command buffer
	ld a, (de)

	; Return if bit 7 is 0
	bit 7, a
	ret z

	; Set register C to 0
	ld c, 0

	; Skip down if command byte less than 0x90
	cp 90h
	jr c, loc_777   ; Jump if carry bit set

	sub 0Fh
	ld  c, 12h

loc_777:
	sub 81h
	ld  hl, PROG2_START
	rst sub_20

	ld  c, a
	ld  b, 0
	add hl, bc
	ld  a, (byte_1C18)
	cp  (hl)
	jr  z, loc_789
	jr  nc, loc_793

loc_789:
	ld  a, (de)
	ld  (flags_1C09), a
	ld  a, (hl)
	and 7Fh
	ld  (byte_1C18), a

loc_793:
	; Zero out the command byte
	xor a
	ld  (de), a

	; Go on to the next byte in the buffer
	inc de
	ret
; End of function processCommand


; =============== S U B R O U T I N E =======================================


muteChannel:                ; CODE XREF: initialize+14p
	call muteSustain

	; Set the TL (attenuation) to mute the channel
	ld   a, YM_TL
	ld   c, 7Fh
	call writeToAllOperators

	ld   c, (ix + 1)
	jp   setFmKeyOff
; End of function muteChannel


; =============== S U B R O U T I N E =======================================


muteSustain:                ; CODE XREF: muteChannelp
	ld  a, YM_D1L_RR
	ld  c, 0FFh
; End of function muteSustain


; =============== S U B R O U T I N E =======================================


writeToAllOperators:        ; CODE XREF: disableSSG+4j muteChannel+7p
	ld b, 4
	loc_7AD:
		push af
		rst  j_writeFMRegisters
		pop  af

		; Go to next operator
		add  a, 4
		djnz loc_7AD
	ret
; End of function writeToAllOperators

; ---------------------------------------------------------------------------
instrumentRegisters:
	db YM_FDBK_ALG

instrumentDetuneMultiply:
	db YM_DT1_MUL + CHAOP1
	db YM_DT1_MUL + CHAOP3
	db YM_DT1_MUL + CHAOP2
	db YM_DT1_MUL + CHAOP4

instrumentAttack:
	db YM_RS_AR + CHAOP1
	db YM_RS_AR + CHAOP3
	db YM_RS_AR + CHAOP2
	db YM_RS_AR + CHAOP4

	db YM_AM_D1R + CHAOP1
	db YM_AM_D1R + CHAOP3
	db YM_AM_D1R + CHAOP2
	db YM_AM_D1R + CHAOP4

	db YM_D2R + CHAOP1
	db YM_D2R + CHAOP3
	db YM_D2R + CHAOP2
	db YM_D2R + CHAOP4

	db YM_D1L_RR + CHAOP1
	db YM_D1L_RR + CHAOP3
	db YM_D1L_RR + CHAOP2
	db YM_D1L_RR + CHAOP4

instrumentVolume:
	db YM_TL + CHAOP1
	db YM_TL + CHAOP3
	db YM_TL + CHAOP2
	db YM_TL + CHAOP4

instrumentSsg:
	db YM_SSG + CHAOP1
	db YM_SSG + CHAOP3
	db YM_SSG + CHAOP2
	db YM_SSG + CHAOP4

channelCFreq:
	db YM_FREQL + CHANCOP3
	db YM_FREQL + CHANCOP4
	db YM_FREQL + CHANCOP2
	db YM_FREQL + CHANNELC

data_7D6:
	dw 644
	dw 683
	dw 723
	dw 766
	dw 813
	dw 860
	dw 911
	dw 965
	dw 1023
	dw 1084
	dw 1148
	dw 1216

; =============== S U B R O U T I N E =======================================


sub_7EE:                ; CODE XREF: performFrameUpdate+1Bp
	call delayTrack
	call z, sub_7F5
	ret
; End of function sub_7EE


; =============== S U B R O U T I N E =======================================


sub_7F5:                ; CODE XREF: sub_7EE+3p
	ld  e, (ix + 3)
	ld  d, (ix + 4)

loc_7FB:
	ld  a, (de)
	inc de
	cp  0E0h
	jp  nc, loc_86E

	or  a
	jp  m, loc_80A

	dec de
	ld  a, (ix + 0Dh)

loc_80A:                ; CODE XREF: sub_7F5+Ej
	ld (ix + 0Dh), a
	cp 80h
	jp z, loc_85B

	push de

	ld  hl, 1D60h
	bit 2, (hl)
	jr  nz, loc_85A

	ex  af, af'
	call setKeyOff
	ex  af, af'

	ld de, data_86B
	ex de, hl
	ldi
	ldi
	ldi

	dec a
	ld  hl, drumSoundTable
	rst dereferencePointerTable

	ld bc, 6
	ldir

	call sub_5FC

	ld  hl, 1D65h
	ld  a, (ix + 5)
	add a, (hl)
	ld  (hl), a

	ld  a, (1D68h)
	ld  hl, drumInstrumentTable
	rst dereferencePointerTable

	ld  a, (1D66h)
	ld  e, (ix + 6)
	push de

	add a, e
	ld  (ix + 6), a
	call writeInstrumentData

	pop de
	ld  (ix + 6), e
	call resetChannelCMode

loc_85A:                ; CODE XREF: sub_7F5+23j
	pop de

loc_85B:                ; CODE XREF: sub_7F5+1Aj
	ld  a, (de)
	inc de
	or  a
	jp  p, loc_1E3

	dec de
	ld  a, (ix + 0Ch)
	ld  (ix + 0Bh), a
	jp  loc_1E9
; ---------------------------------------------------------------------------
data_86B:
	db  80h
	db    2
	db    1
; ---------------------------------------------------------------------------

loc_86E:                ; CODE XREF: sub_7F5+Aj
	ld  hl, loc_874
	jp  loc_999
; ---------------------------------------------------------------------------

loc_874:
	inc de
	jp loc_7FB

drumSoundTable:
	dw drumSound81
	dw drumSound82
	dw drumSound83
	dw drumSound84
	dw drumSound85
	dw drumSound86
	dw drumSound87
	dw drumSound88
	dw drumSound89
	dw drumSound8A

drumInstrumentTable:
	dw drumInstrument0
	dw drumInstrument1
	dw drumInstrument2
	dw drumInstrument3
	dw drumInstrument4
	dw drumInstrument5

drumSound81:
	dw data_89E     ; Track Pointer
	db 0            ; Transposition
	db 6            ; Volume
	db 0            ; Modulation
	db 0            ; Instrument

data_89E:
	db 0B4h, 010h, 0F2h

drumInstrument0:
	db  3Ch
	db  0Fh
	db    0
	db    0
	db    0
	db  1Fh
	db  1Ah
	db  18h
	db  1Ch
	db  17h
	db  11h
	db  1Ah
	db  0Eh
	db    0
	db  0Fh
	db  14h
	db  10h
	db  1Fh
	db 0ECh
	db 0FFh
	db 0FFh
	db    7
	db  80h
	db  16h
	db  80h

drumSound82:
	dw data_8C0     ; Track Pointer
	db 0            ; Transposition
	db 0Ch          ; Volume
	db 1            ; Modulation
	db 1            ; Instrument

data_8C0:
	db 0E0h, 080h, 0B6h, 00Ah, 0F2h

drumInstrument1:
	db  3Eh
	db  60h
	db  30h
	db  30h
	db  30h
	db  19h
	db  1Fh
	db  1Fh
	db  1Fh
	db  15h
	db  11h
	db  11h
	db  0Ch
	db  10h
	db  0Ah
	db    6
	db    9
	db  4Fh
	db  5Fh
	db 0AFh
	db  8Fh
	db    0
	db  82h
	db  83h
	db  80h

drumSound83:
	dw data_8E4     ; Track Pointer
	db 0            ; Transposition
	db 0Ch          ; Volume
	db 1            ; Modulation
	db 1            ; Instrument

data_8E4:
	db 0B3h, 00Ah, 0F2h

drumSound84:
	dw data_8ED     ; Track Pointer
	db 0            ; Transposition
	db 0Ch          ; Volume
	db 1            ; Modulation
	db 1            ; Instrument

data_8ED:
	db 0E0h, 040h, 0B0h, 00Ah, 0F2h

drumSound87:
	dw data_8F8     ; Track Pointer
	db 0            ; Transposition
	db 0Ch          ; Volume
	db 1            ; Modulation
	db 1            ; Instrument

data_8F8:
	db 0B2h, 00Ah, 0F2h

drumSound85:
	dw data_901     ; Track Pointer
	db 0            ; Transposition
	db 0Ah          ; Volume
	db 1            ; Modulation
	db 2            ; Instrument

data_901:
	db 08Fh, 008h, 0F2h

drumInstrument2:
	db  3Ch
	db    0
	db    0
	db    0
	db    0
	db  1Fh
	db  1Fh
	db  1Fh
	db  1Fh
	db    0
	db  16h
	db  0Fh
	db  0Fh
	db    0
	db    0
	db    0
	db    0
	db  0Fh
	db 0AFh
	db 0FFh
	db 0FFh
	db    0
	db  85h
	db  0Ah
	db  80h

drumSound86:
	dw data_923     ; Track Pointer
	db 0            ; Transposition
	db 6            ; Volume
	db 1            ; Modulation
	db 3            ; Instrument

data_923:
	db 0B0h, 016h, 0F2h

drumInstrument3:
	db  72h
	db  9Eh
	db  5Bh
	db  42h
	db  22h
	db  96h
	db  96h
	db  9Eh
	db  96h
	db  16h
	db  18h
	db  16h
	db  18h
	db  10h
	db  17h
	db  11h
	db  18h
	db  4Fh
	db  5Fh
	db  4Fh
	db  4Fh
	db    0
	db    0
	db  10h
	db  80h

drumSound88:
	dw data_945     ; Track Pointer
	db 0            ; Transposition
	db 0Eh          ; Volume
	db 1            ; Modulation
	db 1            ; Instrument

data_945:
	db 0B9h, 010h, 0F2h

drumSound89:
	dw data_94E     ; Track Pointer
	db 0F7h         ; Transposition
	db 0Ah          ; Volume
	db 0            ; Modulation
	db 4            ; Instrument

data_94E:
	db 0FEh, 003h, 000h, 000h, 000h, 095h, 020h, 0F2h

drumInstrument4:
	db  3Ch
	db  0Ah
	db  50h
	db  70h
	db    0
	db  1Fh
	db  17h
	db  19h
	db  1Dh
	db  1Dh
	db  15h
	db  1Ah
	db  17h
	db    6
	db  18h
	db    7
	db  19h
	db  0Fh
	db  5Fh
	db  6Fh
	db  1Fh
	db  0Ch
	db  95h
	db    0
	db  8Eh

drumSound8A:
	dw data_975     ; Track Pointer
	db 0            ; Transposition
	db 7            ; Volume
	db 0            ; Modulation
	db 5            ; Instrument

data_975:
	db 0FEh, 000h, 003h, 000h, 003h, 0D1h, 008h, 0F2h

drumInstrument5:
	db  3Dh
	db    0
	db  0Fh
	db  0Fh
	db  0Fh
	db  1Fh
	db  9Fh
	db  9Fh
	db  9Fh
	db  1Fh
	db  1Fh
	db  1Fh
	db  1Fh
	db    0
	db  0Eh
	db  10h
	db  0Fh
	db  0Fh
	db  4Fh
	db  4Fh
	db  4Fh
	db    0
	db  90h
	db  90h
	db  85h
; ---------------------------------------------------------------------------

handleCommandByte:                ; CODE XREF: sub_150+12j
	ld  hl, loc_9A2

loc_999:                ; CODE XREF: sub_7F5+7Cj
	push    hl
	sub 0E0h
	ld  hl, commandTable
	rst dereferencePointerTable
	ld  a, (de)
	jp  (hl)
; End of function sub_7F5

; ---------------------------------------------------------------------------

loc_9A2:
	inc de
	jp loc_15E
; ---------------------------------------------------------------------------
commandTable:
	dw  cmd_E0   ; E0 - pan
	dw  cmd_E1   ; E1 - detune
	dw  cmd_E2   ; E2
	dw  cmd_E3   ; E3 - silence track
	dw  cmd_E4   ; E4
	dw  cmd_E5   ; E5 - end loop
	dw  cmd_E6   ; E6
	dw  cmd_E7   ; E7
	dw  cmd_E8   ; E8
	dw  cmd_E9   ; E9
	dw  _nullret ; EA - null
	dw  _nullret ; EB - null
	dw  _nullret ; EC - null
	dw  cmd_ED  ; ED
	dw  cmd_EE  ; EE
	dw  cmd_EF  ; EF
	dw  cmd_F0  ; F0
	dw  _nullret ; F1 - null
	dw  cmd_F2  ; F2
	dw  _nullret ; F3 - null
	dw  cmd_F4  ; F4
	dw  _nullret ; F5 - null
	dw  cmd_F6  ; F6 - goto
	dw  cmd_F7  ; F7 - loop
	dw  cmd_F8  ; F8 - gosub
	dw  cmd_F9  ; F9 - return
	dw  cmd_FA  ; FA
	dw  cmd_FB  ; FB
	dw  cmd_FC  ; FC
	dw  cmd_FD  ; FD
	dw  cmd_FE  ; FE
	dw  cmd_FF  ; FF - meta command

metaCommandTable:
	dw  _nullret    ; 00 - null
	dw  metacmd_01  ; 01
	dw  metacmd_02  ; 02
	dw  metacmd_03  ; 03
	dw  metacmd_04  ; 04
	dw  metacmd_05  ; 05
	dw  metacmd_06  ; 06
	dw  metacmd_07  ; 07

cmd_FF:
	ld hl, metaCommandTable
	rst dereferencePointerTable
	inc de
	ld a, (de)
	jp (hl)

metacmd_06:
	ld (ix + 18h), 80h
	ld (ix + 19h), e
	ld (ix + 1Ah), d

; =============== S U B	R O U T	I N E =======================================


writeSsg:
	ld hl, instrumentSsg
	ld b, 4
	loc_A0C:
		ld  a, (de)
		inc de
		ld  c, a

		ld  a, (hl)
		inc hl

		rst  j_writeFMRegisters
		djnz loc_A0C

	dec de
	ret
; End of function writeSsg

; ---------------------------------------------------------------------------

metacmd_05:
	exx
	ld b, 7
	ld de, 30h
	ld hl, 1C42h

	loc_A1F:
		ld (hl), a
		add hl, de
		djnz loc_A1F

	exx
	ret
; ---------------------------------------------------------------------------

metacmd_02:
	push ix
	call loc_491
	pop  ix
	ret
; ---------------------------------------------------------------------------

metacmd_03:
	ld (1C11h), a
	or a
	jr z, loc_A50
	push ix
	push de
	ld ix, 1C40h

	ld b, 7
	ld de, 30h

	loc_A3F:
		res 7, (ix + 0)
		call setFmKeyOff
		add ix, de
		djnz loc_A3F

	pop de
	pop ix

	jp loc_531
; ---------------------------------------------------------------------------

loc_A50:
	push ix
	push de

	ld ix, 1C40h
	ld b, 7
	ld de, 30h

	loc_A5C:
		set 7, (ix + 0)
		add ix, de
		djnz loc_A5C

	pop de
	pop ix
	ret
; ---------------------------------------------------------------------------

metacmd_04:
	ex de, hl

	ld e, (hl)
	inc hl

	ld d, (hl)
	inc hl

	ld c, (hl)
	ld b, 0
	inc hl

	ex de, hl
	ldir

	dec de
	ret
; ---------------------------------------------------------------------------

cmd_E1:
	ld (ix + 10h), a
	ret
; ---------------------------------------------------------------------------

metacmd_07:
	ld (ix + 18h), a
	inc de
	ld a, (de)
	ld (ix + 19h), a
	ret
; ---------------------------------------------------------------------------

metacmd_01:
	ld hl, 1C14h
	ld (hl), a
	dec hl
	ld (hl), a
	ret
; ---------------------------------------------------------------------------

cmd_E2:
	ld (1C16h), a
	ret
; ---------------------------------------------------------------------------

cmd_ED:
	call loc_A98
	rst j_writeFMRegisters
	ret
; ---------------------------------------------------------------------------

cmd_EE:
	call loc_A98
	rst j_writeDataToFM1
	ret
; ---------------------------------------------------------------------------

loc_A98:
	ex de, hl

	ld a, (hl)
	inc hl

	ld c, (hl)

	ex de, hl
	ret
; ---------------------------------------------------------------------------

cmd_F0:
	ld (ix + 20h), e
	ld (ix + 21h), d
	ld (ix + 7), 80h
	inc de
	inc de
	inc de
	ret
; ---------------------------------------------------------------------------

cmd_E3:
	call muteChannel
	jp   cmd_F2
; ---------------------------------------------------------------------------

cmd_E8:
	call sub_20B
	ld (ix + 1Eh), a
	ld (ix + 1Fh), a
	ret

cmd_E4:
	push ix
	pop hl

	ld bc, 11h
	add hl, bc
	ex de, hl

	ld bc, 5
	ldir

	ld a, 1
	ld (de), a

	ex de, hl
	dec de
	ret

cmd_E7:
	set 1, (ix + 0)
	dec de
	ret

cmd_FE:
	ld a, (ix + 1)
	cp 2
	jr nz, sub_B06

	set 0, (ix + 0)
	exx
	call sub_140
	ld b, 4

	loc_AE6:
		push bc
		exx
		ld a, (de)
		inc de
		exx

		ld hl, data_B0A
		add a, a
		ld c, a
		ld b, 0
		add hl, bc
		ldi
		ldi

		pop bc
		djnz loc_AE6

	exx
	dec de
	ld a, 4Fh

sub_AFE:
	ld (timerStatus), a
	ld c, a
	ld a, YM_TMRCTRL
	rst j_writeDataToFM1
	ret

sub_B06:
	inc de
	inc de
	inc de
	ret

data_B0A:
	dw 000h
	dw 132h
	dw 18Eh
	dw 1E4h

cmd_EF:
	call muteSustain
	ld a, (de)
	ld (ix + 8), a
	or a
	jp p, loc_B3D

	inc de
	ld a, (de)
	ld (ix + 0Fh), a

sub_B22:
	push de
	ld hl, PROG2_START
	ld c, 4
	ld a, (ix + 15)
	sub 81h
	call loc_23

	rst dereferencePointerTable
	rst dereferencePointer
	ld a, (ix + 8)
	and 7Fh
	ld b, a
	call loc_434
	jr loc_B42

loc_B3D:
	push de
	ld b, a
	call sub_425

loc_B42:
	call writeInstrumentData
	pop de
	ret

; =============== S U B R O U T I N E =======================================


cmd_E0:                ; CODE XREF: sub_215+3Dp
	ld  c, 3Fh

loc_B49:
	ld  a, (ix + TRACK.byte_A)
	and c
	ex  de, hl
	or  (hl)
	ld  (ix + TRACK.byte_A), a

	ld  c, a
	ld  a, YM_CHENABLE
	rst j_writeFMRegisters
	ex  de, hl
	ret
; End of function cmd_E0

; ---------------------------------------------------------------------------

cmd_E9:
	ld c, a
	ld a, 22h
	rst j_writeDataToFM1
	inc de
	ld c, 0C0h
	jr loc_B49
; ---------------------------------------------------------------------------

cmd_E6:
	add a, (ix + 6)
	ld (ix + 6), a

; =============== S U B R O U T I N E =======================================


sub_B67:                ; CODE XREF: writeInstrumentData+1Cj handleFade+41p
	exx

	ld de, instrumentVolume
	ld l, (ix + TRACK.addrlo_1C)
	ld h, (ix + TRACK.addrhi_1D)

	ld b, 4
	loc_B73:
		ld a, (hl)
		or a
		jp p, loc_B7B

		add a, (ix + TRACK.byte_6)

	loc_B7B:
		and 7Fh

		ld  c, a
		ld  a, (de)
		rst j_writeFMRegisters

		inc  de
		inc  hl
		djnz loc_B73

	exx
	ret
; End of function sub_B67


; =============== S U B R O U T I N E =======================================


cmd_FB:
	add a, (ix + 5)
	ld  (ix + 5), a
	ret
; End of function cmd_FB


; =============== S U B R O U T I N E =======================================


cmd_FA:
	ld (ix + 2), a
	ret
; End of function cmd_FA


; =============== S U B R O U T I N E =======================================


cmd_F4:
	ld (ix + 7), a
	ret
; End of function cmd_F4


; =============== S U B R O U T I N E =======================================


cmd_F6:                ; CODE XREF: cmd_E5+13j
	ex  de, hl
	ld  e, (hl)
	inc hl
	ld  d, (hl)
	dec de
	ret
; End of function cmd_F6


; =============== S U B R O U T I N E =======================================


cmd_FC:
	cp 1
	jr nz, loc_BA4

	set 5, (ix + 0)
	ret
; ---------------------------------------------------------------------------

loc_BA4:                ; CODE XREF: cmd_FC+2j
	res 1, (ix + 0)
	res 5, (ix + 0)

	xor a
	ld  (ix + 10h), a
	ret
; End of function cmd_FC


; =============== S U B R O U T I N E =======================================


cmd_FD:
	cp 1
	jr nz, loc_BBA

	set 3, (ix + 0)
	ret
; ---------------------------------------------------------------------------

loc_BBA:                ; CODE XREF: cmd_FD+2j
	res 3, (ix + 0)
	ret
; End of function cmd_FD

; ---------------------------------------------------------------------------
cmd_F2:
	res 7, (ix + 0)
	ld a, 1Fh
	ld (1C15h), a
	ld      c, (ix + TRACK.channel)
	call    setFmKeyOff

	push    ix
	call    setIndexRegisters

	ld      a, (1C19h)
	or      a
	jr      z, loc_C40

	xor     a
	ld      (1C18h), a
	bit     7, (iy + 0)
	jr      z, loc_BF5

	ld      a, (ix + TRACK.channel)
	cp      (iy + 1)
	jr      nz, loc_BF5

	push    iy
	ld      l, (iy + 2Ah)
	ld      h, (iy + 2Bh)
	jr      loc_BFD
; ---------------------------------------------------------------------------

loc_BF5:
	push hl
	ld hl, (1C37h)
	res 2, (iy + 0)
; ---------------------------------------------------------------------------

loc_BFD:
	pop ix
	res 2, (ix + TRACK.flags)
	bit 7, (ix + TRACK.flags)
	jr z, loc_C40

	ld a, 2
	cp (ix + TRACK.channel)
	jr nz, loc_C1D

	ld a, 4Fh
	bit 0, (ix + TRACK.flags)
	jr nz, loc_C1A

	and 0Fh

	loc_C1A:
	call sub_AFE

loc_C1D:
	ld a, (ix + TRACK.byte_8)
	or a
	jp p, loc_C29

	call sub_B22
	jr loc_C3D

loc_C29:
	ld b, a
	call loc_434
	call writeInstrumentData

	ld a, (ix + TRACK.byte_18)
	or a
	jp p, loc_C40
	ld e, (ix + TRACK.byte_19)
	ld d, (ix + TRACK.byte_1A)

loc_C3D:
	call writeSsg

loc_C40:
	pop ix
	pop hl
	pop hl
	ret
; ---------------------------------------------------------------------------

cmd_F8:
	ld c, a
	inc de
	ld a, (de)
	ld b, a
	push bc
	push ix
	pop hl
	dec (ix + 9)
	ld c, (ix + 9)
	dec (ix + 9)
	ld b, 0
	add hl, bc
	ld (hl), d
	dec hl
	ld (hl), e
	pop de
	dec de
	ret
; ---------------------------------------------------------------------------

cmd_F9:
	push ix
	pop hl

	ld c, (ix + 9)
	ld b, 0
	add hl, bc
	ld e, (hl)
	inc hl
	ld d, (hl)
	inc (ix + 9)
	inc (ix + 9)
	ret
; ---------------------------------------------------------------------------

cmd_F7:
	inc de
	add a, 28h
	ld c, a
	ld b, 0

	push ix
	pop hl

	add hl, bc
	ld a, (hl)
	or a
	jr nz, loc_C82
	ld a, (de)
	ld (hl), a

loc_C82:
	inc de
	dec (hl)
	jp nz, cmd_F6
	inc de
	ret

; =============== S U B R O U T I N E =======================================


cmd_E5:
	inc de
	add a, 28h
	ld  c, a
	ld  b, 0
	push ix

	pop hl
	add hl, bc
	ld  a, (hl)
	dec a
	jp  z, loc_C9A

	inc de
	ret
; ---------------------------------------------------------------------------

loc_C9A:                ; CODE XREF: cmd_E5+Cj
	xor a
	ld  (hl), a
	jp  cmd_F6
; End of function cmd_E5

_nullret:
	ret

	.end _PROG0
