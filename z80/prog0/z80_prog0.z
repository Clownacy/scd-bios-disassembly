	; Common include files
	.include "memory.z"
	.include "registers.z"
	.include "ym2612.z"

	; Local include files
	.include "structures.z"
	.include "variables.z"

	.org 0000h

_PROG0:
_reset:
	; Disable interrupts (twice because who knows why)
	di
	di

	; Set interrupt mode 1 (INT handler at 38h)
	im 1

	; Jump to start code
	jr start
; ---------------------------------------------------------------------------
	dc 2, 0

; =============== S U B R O U T I N E =======================================


waitForWrite:               ; CODE XREF: writeFMRegisters+11p ...
	ld  a, (FM1_ADDR)
	bit 7, a
	jr  nz, waitForWrite
	ret
; End of function waitForWrite


; =============== S U B R O U T I N E =======================================

; Attributes: thunk

j_writeFMRegisters:
	jp  writeFMRegisters
; End of function j_writeFMRegisters

; ---------------------------------------------------------------------------
	dc 5, 0

; =============== S U B R O U T I N E =======================================

; Attributes: thunk

j_writeDataToFM1:
	jp  writeDataToFM1
; End of function j_writeDataToFM1

; ---------------------------------------------------------------------------
	dc 5, 0

; =============== S U B R O U T I N E =======================================


sub_20:
	ld hl, PROG2_START

loc_23:
	ld b, 0
	jp loc_419
; End of function sub_20


; =============== S U B R O U T I N E =======================================


dereferenceWithWordCount:
	ld  c, a
	ld  b, 0
	add hl, bc
	add hl, bc
	nop
	nop
	nop
; End of function dereferenceWithWordCount


; =============== S U B R O U T I N E =======================================


dereferencePointer:
	ld  a, (hl)
	inc hl
	ld  h, (hl)
	ld  l, a
	ret
; End of function dereferencePointer

; ---------------------------------------------------------------------------
	dc 3, 0

; =============== S U B R O U T I N E =======================================


int_handler:
	; Save registers
	push    af
	push    bc
	push    de
	push    hl

	; Don't do anything if delayFrames is nonzero
	ld  hl, delayFrames
	ld  a, (hl)
	or  a
	jr  z, loc_46

	dec (hl)
	jr  loc_4D
; ---------------------------------------------------------------------------

loc_46:                 ; CODE XREF: int_handler+9j
	; Increment the frame counter
	ld  hl, frameCounter
	inc (hl)

	; Do stuff?
	call sub_6B

loc_4D:                 ; CODE XREF: int_handler+Cj
	; Restore registers
	pop hl
	pop de
	pop bc
	pop af

	ret
; End of function int_handler

; ---------------------------------------------------------------------------

start:                  ; CODE XREF: ROM:0004j
	; Set the initial stack pointer
	ld sp, STACK_INIT

	ld a, 3
	ld (delayFrames), a

startup_loop:           ; CODE XREF: ROM:005Fj
	ei
	ld a, (delayFrames)
	or a
	jp nz, startup_loop

	call initialize

main_loop:              ; CODE XREF: ROM:0069j
	ei
	call sub_75B
	jr  main_loop

; =============== S U B R O U T I N E =======================================


sub_6B:                 ; CODE XREF: int_handler+12p
	call sub_62D
	call sub_742
	call sub_6BC
	call sub_48E
	call sub_A0

	xor a
	ld  (byte_1C19), a

	ld   ix, struct_1C40
	bit  NOTE.flag7, (ix + NOTE.flags)
	call nz, sub_7EE

	ld b, 6
	ld ix, struct_1C70
; End of function sub_6B


; =============== S U B R O U T I N E =======================================


sub_8F:                 ; CODE XREF: sub_8F+Ej sub_A0+Ep ...
	push bc

	bit  NOTE.flag7, (ix + NOTE.flags)
	call nz, sub_BE

	ld  de, NOTE.size
	add ix, de

	pop  bc
	djnz sub_8F

	ret
; End of function sub_8F


; =============== S U B R O U T I N E =======================================


sub_A0:                 ; CODE XREF: sub_6B+Cp
	call sub_48E

	ld   a, 1
	ld   (byte_1C19), a
	ld   ix, struct_1D90
	ld   b, 3
	call sub_8F

	ld a, 80h
	ld (byte_1C19), a
	ld b, 2
	ld ix, 1E20h
	jr sub_8F
; End of function sub_A0


; =============== S U B R O U T I N E =======================================


sub_BE:                 ; CODE XREF: sub_8F+5p
	call sub_271
	jr   nz, loc_DA

	call sub_150
	bit NOTE.flag4, (ix + NOTE.flags)
	ret nz

	call sub_2A8
	call sub_3D9
	call sub_2D3
	call sub_FC
	jp  loc_3B1
; ---------------------------------------------------------------------------

loc_DA:                 ; CODE XREF: sub_BE+3j
	call sub_25B
	bit  4, (ix + 0)
	ret  nz

	call sub_279
	ld   a, (ix + 1Eh)
	or   a
	jr   z, loc_F1

	dec (ix + 1Eh)
	jp  z, sub_3C8

loc_F1:                 ; CODE XREF: sub_BE+2Bj
	call sub_3D9
	bit  6, (ix + 0)
	ret  nz

	call sub_2D3
; End of function sub_BE


; =============== S U B R O U T I N E =======================================


sub_FC:                 ; CODE XREF: sub_BE+16p
	bit 2, (ix + 0)
	ret nz

	bit 0, (ix + 0)
	jp  nz, loc_111

loc_108:                ; CODE XREF: sub_FC+1Aj
	ld  a, YM_FREQL
	ld  c, h
	rst j_writeFMRegisters

	ld  a, YM_FREQH
	ld  c, l
	rst j_writeFMRegisters

	ret
; ---------------------------------------------------------------------------

loc_111:                ; CODE XREF: sub_FC+9j
	ld a, (ix + 1)
	cp 2
	jr nz, loc_108

	call sub_140
	exx

	ld hl, data_7D2
	ld b, 4

	loc_121:                ; CODE XREF: sub_FC+40j
		ld   a, (hl)
		push af

		inc hl
		exx
		ex  de, hl
		ld  c, (hl)
		inc hl
		ld  b, (hl)
		inc hl
		ex  de, hl
		ld  l, (ix + 0Dh)
		ld  h, (ix + 0Eh)
		add hl, bc

		pop  af
		push af

		ld  c, h
		rst j_writeDataToFM1

		pop af

		sub 4
		ld  c, l
		rst j_writeDataToFM1

		exx
		djnz loc_121

	exx
	ret
; End of function sub_FC


; =============== S U B R O U T I N E =======================================


sub_140:                ; CODE XREF: sub_FC+1Cp
	ld  de, 1C2Ah

	ld  a, (byte_1C19)
	or  a
	ret z

	ld  de, 1C1Ah
	ret p

	ld  de, 1C22h
	ret
; End of function sub_140


; =============== S U B R O U T I N E =======================================


sub_150:                ; CODE XREF: sub_BE+5p
	ld e, (ix + NOTE.addrlo_3)
	ld d, (ix + NOTE.addrhi_4)

	res NOTE.flag1, (ix + NOTE.flags)
	res NOTE.flag4, (ix + NOTE.flags)

	ld  a, (de)
	inc de
	cp  0E0h
	jp  nc, loc_996

	ex   af, af'
	call sub_3C8
	call sub_215
	ex   af, af'

	bit 3, (ix + 0)
	jp  nz, loc_1BD

	or a
	jp p, loc_1E3

	sub 81h
	jp  p, loc_182

	call sub_3AC
	jr   loc_1A3
; ---------------------------------------------------------------------------

loc_182:                ; CODE XREF: sub_150+2Aj
	add  a, (ix + 5)
	push de
	ld   d, 8
	ld   e, 0Ch
	ex   af, af'
	xor  a

loc_18C:                ; CODE XREF: sub_150+42j
	ex  af, af'
	sub e
	jr  c, loc_194
	ex  af, af'

	add a, d
	jr  loc_18C
; ---------------------------------------------------------------------------

loc_194:                ; CODE XREF: sub_150+3Ej
	add a, e
	ld  hl, data_7D6
	rst dereferenceWithWordCount

	ex  af, af'
	or  h
	ld  h, a
	pop de

	ld  (ix + 0Dh), l
	ld  (ix + 0Eh), h

loc_1A3:                ; CODE XREF: sub_150+30j
	bit 5, (ix + 0)
	jr  nz, loc_1B6

	ld  a, (de)
	or  a
	jp  p, loc_1E2

	ld  a, (ix + 0Ch)
	ld  (ix + 0Bh), a
	jr  loc_1E9
; ---------------------------------------------------------------------------

loc_1B6:                ; CODE XREF: sub_150+57j
	ld  a, (de)
	inc de
	ld  (ix + 10h), a
	jr  loc_1E1
; ---------------------------------------------------------------------------

loc_1BD:                ; CODE XREF: sub_150+21j
	ld  h, a
	ld  a, (de)
	inc de
	ld  l, a
	or  h
	jr  z, loc_1D0

	ld  a, (ix + 5)
	ld  b, 0
	or  a
	jp  p, loc_1CE
	dec b

loc_1CE:                ; CODE XREF: sub_150+7Aj
	ld  c, a
	add hl, bc

loc_1D0:                ; CODE XREF: sub_150+72j
	ld  (ix + 0Dh), l
	ld  (ix + 0Eh), h
	bit 5, (ix + 0)
	jr  z, loc_1E1

	ld  a, (de)
	inc de
	ld  (ix + 10h), a

loc_1E1:                ; CODE XREF: sub_150+6Bj sub_150+8Aj
	ld  a, (de)

loc_1E2:                ; CODE XREF: sub_150+5Bj
	inc de

loc_1E3:                ; CODE XREF: sub_150+25j sub_7F5+69j
	call    sub_20B
	ld  (ix + 0Ch), a

loc_1E9:                ; CODE XREF: sub_150+64j sub_7F5+73j
	ld  (ix + 3), e
	ld  (ix + 4), d
	ld  a, (ix + 0Ch)
	ld  (ix + 0Bh), a

	bit 1, (ix + 0)
	ret nz

	xor a
	ld (ix + 25h), a
	ld (ix + 22h), a
	ld (ix + 17h), a

	ld  a, (ix + 1Fh)
	ld  (ix + 1Eh), a
	ret
; End of function sub_150


; =============== S U B R O U T I N E =======================================


sub_20B:                ; CODE XREF: sub_150:loc_1E3p
	ld  b, (ix + 2)
	dec b
	ret z

	ld c, a

	loc_211:
		add  a, c
		djnz loc_211

	ret
; End of function sub_20B


; =============== S U B R O U T I N E =======================================


sub_215:                ; CODE XREF: sub_150+19p
	ld  a, (ix + 11h)
	dec a
	ret m

	jr  nz, loc_257

	bit NOTE.flag1, (ix + NOTE.flags)
	ret nz

loc_221:                ; CODE XREF: sub_25B+6j
	dec (ix + 16h)
	ret nz

	exx
	ld  a, (ix + 15h)
	ld  (ix + 16h), a

	ld  a, (ix + 12h)
	ld  hl, data_263
	rst dereferenceWithWordCount

	ld  e, (ix + 13h)
	inc (ix + 13h)
	ld  a, (ix + 14h)
	dec a
	cp  e
	jr  nz, loc_24E

	dec (ix + 13h)
	ld  a, (ix + 11h)
	cp  2
	jr  z, loc_24E

	ld  (ix + 13h), 0

loc_24E:                ; CODE XREF: sub_215+29j sub_215+33j
	ld  d, 0
	add hl, de
	ex  de, hl
	call sub_B47

	exx
	ret
; ---------------------------------------------------------------------------

loc_257:                ; CODE XREF: sub_215+5j
	xor a
	ld  (ix + 13h), a
; End of function sub_215


; =============== S U B R O U T I N E =======================================


sub_25B:                ; CODE XREF: sub_BE:loc_DAp
	ld  a, (ix + 11h)
	sub 2
	ret m
	jr  loc_221
; End of function sub_25B

; ---------------------------------------------------------------------------
data_263:
	dw 26Bh
	dw 26Ch
	dw 26Dh
	dw 26Eh

	db 0C0h
	db  80h
	db 0C0h
	db  40h
	db 0C0h
	db  80h

; =============== S U B R O U T I N E =======================================


sub_271:                ; CODE XREF: sub_BEp sub_7EEp
	ld  a, (ix + NOTE.byte_B)
	dec a
	ld  (ix + NOTE.byte_B), a
	ret
; End of function sub_271


; =============== S U B R O U T I N E =======================================


sub_279:                ; CODE XREF: sub_BE+24p
	ld  a, (ix + 18h)
	or  a
	ret z
	ret m

	dec a
	ld  c, 10
	rst sub_20
	rst dereferenceWithWordCount
	call sub_37B

	ld  h, (ix + 1Dh)
	ld  l, (ix + 1Ch)
	ld  de, data_7CA
	ld  b, 4
	ld  c, (ix + 19h)

	loc_295:
		push af
		sra c
		push bc

		jr  nc, loc_2A1

		add a, (hl)
		and 7Fh
		ld  c, a
		ld  a, (de)
		rst j_writeFMRegisters

	loc_2A1:
		pop bc
		inc de
		inc hl
		pop af
		djnz    loc_295

	ret
; End of function sub_279


; =============== S U B R O U T I N E =======================================


sub_2A8:                ; CODE XREF: sub_BE+Dp
	bit 7, (ix + 7)
	ret z

	bit 1, (ix + 0)
	ret nz

	ld  e, (ix + 20h)
	ld  d, (ix + 21h)

	push ix
	pop  hl

	ld  b, 0
	ld  c, 24h
	add hl, bc
	ex  de, hl
	ldi
	ldi
	ldi
	ld  a, (hl)
	srl a
	ld  (de), a
	xor a
	ld  (ix + 22h), a
	ld  (ix + 23h), a
	ret
; End of function sub_2A8


; =============== S U B R O U T I N E =======================================


sub_2D3:                ; CODE XREF: sub_BE+13p sub_BE+3Bp
	ld  a, (ix + 7)
	or  a
	ret z

	cp  80h
	jr  nz, loc_324

	dec (ix + 24h)
	ret nz

	inc (ix + 24h)
	push    hl
	ld  l, (ix + 22h)
	ld  h, (ix + 23h)
	dec (ix + 25h)
	jr  nz, loc_30F

	ld   e, (ix + 20h)
	ld   d, (ix + 21h)
	push de
	pop  iy

	ld  a, (iy + 1)
	ld  (ix + 25h), a
	ld  a, (ix + 26h)
	ld  c, a
	and 80h
	rlca
	neg
	ld  b, a
	add hl, bc
	ld  (ix + 22h), l
	ld  (ix + 23h), h

loc_30F:
	pop bc
	add hl, bc
	dec (ix + 27h)
	ret nz

	ld  a, (iy + 3)
	ld  (ix + 27h), a
	ld  a, (ix + 26h)
	neg
	ld  (ix + 26h), a
	ret
; ---------------------------------------------------------------------------

loc_324:
	dec a
	ex  de, hl
	ld  c, 8
	rst sub_20
	rst dereferenceWithWordCount
	jr  loc_32F
; ---------------------------------------------------------------------------

loc_32C:
	ld  (ix + 25h), a

loc_32F:
	push    hl
	ld  c, (ix + 25h)
	call    sub_41E
	pop hl

	bit 7, a
	jp  z, loc_369

	cp  82h
	jr  z, loc_352

	cp  80h
	jr  z, loc_356

	cp  84h
	jr  z, loc_359

	ld  h, 0FFh
	jr  nc, loc_36B

	set 6, (ix + 0)
	pop hl
	ret
; ---------------------------------------------------------------------------

loc_352:
	inc bc
	ld  a, (bc)
	jr  loc_32C
; ---------------------------------------------------------------------------

loc_356:
	xor a
	jr  loc_32C
; ---------------------------------------------------------------------------

loc_359:
	inc bc
	ld  a, (bc)
	add a, (ix + 22h)
	ld  (ix + 22h), a
	inc (ix + 25h)
	inc (ix + 25h)
	jr  loc_32F
; ---------------------------------------------------------------------------

loc_369:
	ld  h, 0

loc_36B:
	ld  l, a
	ld  b, (ix + 22h)
	inc b
	ex  de, hl

	loc_371:
		add  hl, de
		djnz loc_371

	inc (ix + 25h)
	ret
; End of function sub_2D3

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_37B

loc_378:                ; CODE XREF: sub_37B+1Aj sub_37B+25j
	ld (ix + 17h), a
; END OF FUNCTION CHUNK FOR sub_37B

; =============== S U B R O U T I N E =======================================


sub_37B:                ; CODE XREF: sub_279+Bp

; FUNCTION CHUNK AT 0378 SIZE 00000003 BYTES

	push    hl
	ld  c, (ix + 17h)
	call    sub_41E
	pop hl

	bit 7, a
	jr  z, loc_3A8

	cp  83h
	jr  z, loc_397

	cp  81h
	jr  z, loc_3A2

	cp  80h
	jr  z, loc_39F

	inc bc
	ld  a, (bc)
	jr  loc_378
; ---------------------------------------------------------------------------

loc_397:                ; CODE XREF: sub_37B+Ej
	set 4, (ix + 0)
	pop hl
	jp  sub_3AC
; ---------------------------------------------------------------------------

loc_39F:                ; CODE XREF: sub_37B+16j
	xor a
	jr  loc_378
; ---------------------------------------------------------------------------

loc_3A2:                ; CODE XREF: sub_37B+12j
	pop hl
	set 4, (ix + 0)
	ret
; ---------------------------------------------------------------------------

loc_3A8:                ; CODE XREF: sub_37B+Aj
	inc (ix + 17h)
	ret
; End of function sub_37B


; =============== S U B R O U T I N E =======================================


sub_3AC:                ; CODE XREF: sub_150+2Dp sub_37B+21j
	set NOTE.flag4, (ix + NOTE.flags)
	ret
; End of function sub_3AC

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_BE

loc_3B1:                ; CODE XREF: sub_BE+19j
	ld  a, (ix + 0Dh)
	or  (ix + 0Eh)
	ret z

	ld  a, (ix + 0)
	and 6
	ret nz

	ld  a, (ix + 1)
	or  0F0h
	ld  c, a
	ld  a, YM_KEYONOFF
	rst j_writeDataToFM1
	ret
; END OF FUNCTION CHUNK FOR sub_BE

; =============== S U B R O U T I N E =======================================


sub_3C8:                ; CODE XREF: sub_BE+30j sub_150+16p ...
	ld  a, (ix + NOTE.flags)
	and 6
	ret nz
; End of function sub_3C8


; =============== S U B R O U T I N E =======================================


setKeyOnOff:                ; CODE XREF: muteChannel+Dj
	; Clear flag in bit 6
	res NOTE.flag6, (ix + NOTE.flags)

	ld  c, (ix + NOTE.channel)
	ld  a, YM_KEYONOFF
	rst j_writeDataToFM1
	ret

; =============== S U B R O U T I N E =======================================


sub_3D9:                ; CODE XREF: sub_BE+10p sub_BE:loc_F1p
	ld b, 0

	ld a, (ix + 10h)
	or a
	jp p, loc_3E3

	dec b

loc_3E3:
	ld h, (ix + 0Eh)
	ld l, (ix + 0Dh)
	ld c, a
	add hl, bc
	ex  de, hl
	ld  a, 7
	and d
	ld  b, a
	ld  c, e
	or  a
	ld  hl, 283h
	sbc hl, bc
	jr  c, loc_3FF

	ld  hl, 0FA85h
	add hl, de
	jr  loc_40D
; ---------------------------------------------------------------------------

loc_3FF:
	or  a
	ld  hl, 508h
	sbc hl, bc
	jr  nc, loc_40C

	ld  hl, 57Ch
	add hl, de
	ex  de, hl

loc_40C:
	ex  de, hl

loc_40D:
	bit 5, (ix + 0)
	ret z

	ld (ix + 0Eh), h
	ld (ix + 0Dh), l
	ret
; End of function sub_3D9

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_20

loc_419:                ; CODE XREF: sub_20+5j
	add hl, bc
	ex  af, af'
	rst dereferencePointer
	ex  af, af'
	ret
; END OF FUNCTION CHUNK FOR sub_20

; =============== S U B R O U T I N E =======================================


sub_41E:                ; CODE XREF: sub_2D3+60p sub_37B+4p
	ld  b, 0
	add hl, bc
	ld  c, l
	ld  b, h
	ld  a, (bc)
	ret
; End of function sub_41E


; =============== S U B R O U T I N E =======================================


sub_425:
	ld hl, (1C37h)

	ld a, (byte_1C19)
	or a
	jr z, loc_434

	ld l, (ix + 2Ah)
	ld h, (ix + 2Bh)

loc_434:
	xor a

	or b
	jr z, locret_43E

	ld de, 19h

loc_43B:
	add hl, de
	djnz loc_43B

locret_43E:
	ret
; End of function sub_425


; =============== S U B R O U T I N E =======================================


writeFMRegisters:                ; CODE XREF: j_writeFMRegistersj
	; Jump down if writing to channels 4-6
	bit 2, (ix + NOTE.channel)
	jr  nz, loc_456

	bit NOTE.flag2, (ix + NOTE.flags)
	ret nz

	; Adjust address for the correct channel
	add a, (ix + NOTE.channel)

writeDataToFM1:         ; CODE XREF: j_writeDataToFM1j
	ld  (FM1_ADDR), a
	rst waitForWrite

	ld  a, c
	ld  (FM1_DATA), a
	ret
; ---------------------------------------------------------------------------

loc_456:                ; CODE XREF: writeFMRegisters+4j
	bit NOTE.flag2, (ix + NOTE.flags)
	ret nz

	; Adjust address for the correct channel
	add a, (ix + NOTE.channel)
	sub 4

writeDataToFM2:         ; CODE XREF: sub_62D+21p
	ld  (FM2_ADDR), a
	rst waitForWrite

	ld  a, c
	ld  (FM2_DATA), a
	ret
; End of function writeFMRegisters


; =============== S U B R O U T I N E =======================================


sub_469:                ; CODE XREF: sub_7F5+5Bp
	ld de, data_7B5

	ld  c, (ix + 0Ah)
	ld  a, YM_CHENABLE
	rst j_writeFMRegisters

	call sub_488

	ld (ix + 1Bh), a

	ld b, 20
	loc_47A:
		call sub_488
		djnz loc_47A

	ld (ix + 1Ch), l
	ld (ix + 1Dh), h
	jp sub_B67
; End of function sub_469


; =============== S U B R O U T I N E =======================================


sub_488:
	ld  a, (de)
	inc de

	ld  c, (hl)
	inc hl

	rst j_writeFMRegisters
	ret
; End of function sub_488


; =============== S U B R O U T I N E =======================================


sub_48E:                ; CODE XREF: sub_6B+9p sub_A0p
	ld a, (flags_1C09)

	bit 7, a
	jp  z, initialize

	cp 90h
	jp c, loc_4DC

	cp 94h
	jp c, loc_54F

	cp 0E0h
	jp c, loc_545

	cp 0F9h
	jp nc, initialize

	sub 0E0h

	ld  hl, addr_4B5
	rst dereferenceWithWordCount

	; Zero out byte_1C18
	xor a
	ld (byte_1C18), a

	jp  (hl)
; ---------------------------------------------------------------------------
addr_4B5:
	dw loc_6A8
	dw initialize
	dw loc_4BB

loc_4BB:
	ld ix, 1E20h
	ld b, 2
	ld a, 80h
	ld (byte_1C19), a

	loc_4C6:
		push bc

		bit NOTE.flag7, (ix + NOTE.flags)
		call nz, loc_4D7

		ld de, NOTE.size
		add ix, de

		pop bc
		djnz loc_4C6

	ret

loc_4D7:
	push hl
	push hl
	jp sub_BBF


; ---------------------------------------------------------------------------

loc_4DC:                ; CODE XREF: sub_48E+Aj
	sub 81h
	ret m

	push af
	call initialize
	pop  af

	ld  c, 4
	rst sub_20
	rst dereferenceWithWordCount

	push hl
	push hl
	rst dereferencePointer

	ld  (1C37h), hl
	pop hl
	pop iy

	ld a, (iy + 5)
	ld (byte_1C13), a
	ld (byte_1C14), a

	ld  de, 6
	add hl, de
	ld  (1C33h), hl

	ld  hl, 537h
	ld  (1C35h), hl

	ld  de, struct_1C40
	ld  b, (iy + 2)
	ld  a, (iy + 4)

	loc_510:
		push bc

		ld  hl, (1C35h)
		ldi
		ldi
		ld  (de), a
		inc de
		ld  (1C35h), hl
		ld  hl, (1C33h)
		ldi
		ldi
		ldi
		ldi
		ld  (1C33h), hl
		call sub_5F5

		pop  bc
		djnz loc_510
; End of function sub_48E

; START OF FUNCTION CHUNK FOR initialize

loc_531:                ; CODE XREF: sub_48E+147j sub_62D+36j ...
	ld a, 80h
	ld (flags_1C09), a
	ret
; END OF FUNCTION CHUNK FOR initialize
; ---------------------------------------------------------------------------
data_537:
	db 80h, 02h
	db 80h, 00h
	db 80h, 01h
	db 80h, 04h
	db 80h, 05h
	db 80h, 06h
	db 80h, 02h
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_48E

loc_545:                ; CODE XREF: sub_48E+14j
	sub 0D0h
	ex  af, af'
	ld  a, 80h
	ld  hl, 0D08h
	jr  loc_556
; ---------------------------------------------------------------------------

loc_54F:                ; CODE XREF: sub_48E+Fj
	sub 90h
	ex  af, af'
	xor a

	ld  hl, PROG1_START

loc_556:                ; CODE XREF: sub_48E+BFj
	ld  (byte_1C19), a
	ex  af, af'
	rst dereferenceWithWordCount

	push    hl
	rst dereferencePointer

	ld  (1C39h), hl
	xor a
	ld  (1C15h), a
	pop hl

	push hl
	pop  iy

	ld  a, (iy + 2)
	ld  (1C3Bh), a
	ld  de, 4
	add hl, de
	ld  b, (iy + 3)

loc_575:                ; CODE XREF: sub_48E+145j
	push bc
	push hl

	inc  hl
	ld   c, (hl)
	call setIndexRegisters

	set 2, (hl)
	push    ix

	ld  a, (byte_1C19)
	or  a
	jr  z, loc_589

	pop hl
	push iy

loc_589:                ; CODE XREF: sub_48E+F6j
	pop de
	pop hl
	ldi
	ld  a, (de)
	cp  2
	call z, loc_72F

	ldi
	ld  a, (1C3Bh)
	ld  (de), a
	inc de
	ldi
	ldi
	ldi
	ldi
	call sub_5F5

	bit 7, (ix + 0)
	jr  z, loc_5B7

	ld  a, (ix + 1)
	cp  (iy + 1)
	jr  nz, loc_5B7

	set 2, (iy + 0)

loc_5B7:                ; CODE XREF: sub_48E+11Bj sub_48E+123j
	push    hl
	ld  hl, (1C39h)
	ld  a, (byte_1C19)
	or  a
	jr  z, loc_5C5

	push iy
	pop  ix

loc_5C5:                ; CODE XREF: sub_48E+131j
	ld (ix + 2Ah), l
	ld (ix + 2Bh), h
	call sub_3C8
	call disableSSG

	pop  hl
	pop  bc
	djnz loc_575

	jp  loc_531
; END OF FUNCTION CHUNK FOR sub_48E

; =============== S U B R O U T I N E =======================================


setIndexRegisters:                ; CODE XREF: sub_48E+EBp
	ld  a, c
	sub 2
	ld (1C32h), a

	; Set value of ix
	push af
	ld   hl, addr_619
	rst  dereferenceWithWordCount
	push hl
	pop  ix
	pop  af

	; Set value of iy
	push af
	ld   hl, addr_60F
	rst  dereferenceWithWordCount
	push hl
	pop  iy
	pop  af

	; Set value of hl
	ld  hl, addr_623
	rst dereferenceWithWordCount
	ret
; End of function setIndexRegisters


; =============== S U B R O U T I N E =======================================


sub_5F5:                ; CODE XREF: sub_48E+9Dp sub_48E+114p
	ex  af, af'

	; Set a = 0
	xor a
	ld (de), a
	inc de
	ld (de), a
	inc de

	ex  af, af'
; End of function sub_5F5


; =============== S U B R O U T I N E =======================================


sub_5FC:                ; CODE XREF: sub_7F5+3Ep
	ex de, hl

	ld (hl), 30h
	inc hl

	ld (hl), 0C0h
	inc hl

	ld (hl), 1

	ld b, 24h
	loc_607:
		inc hl
		ld (hl), 0
		djnz loc_607

	inc hl

	ex de, hl
	ret
; End of function sub_5FC

; ---------------------------------------------------------------------------
addr_60F: ; ix
	dw 1E20h
	dw 1E20h
	dw 1E20h
	dw 1E20h
	dw 1E50h

addr_619: ; iy
	dw struct_1D90
	dw 1DC0h
	dw 1DC0h
	dw 1DC0h
	dw 1DF0h

addr_623: ; hl
	dw 1D60h
	dw 1D00h
	dw 1D00h
	dw 1D00h
	dw 1D30h

; =============== S U B R O U T I N E =======================================


sub_62D:                ; CODE XREF: sub_6Bp
	; Return if byte_1C10 is zero
	ld  hl, byte_1C10
	ld  a, (hl)
	or  a
	ret z

	; Jump if byte_1C10 is negative
	jp  m, loc_666

	pop de
	dec a
	ret nz

	ld  (hl), 2

	push bc
	push af

	; Turn off channels 1-3
	ld b, 3
	ld a, YM_CHENABLE
	ld c, 0

	loc_643:
		push af
		rst  j_writeDataToFM1
		pop  af
		inc  a
		djnz loc_643

	; Turn off channels 4-6
	ld b, 3
	ld a, YM_CHENABLE

	loc_64D:
		push af
		call writeDataToFM2
		pop  af
		inc  a
		djnz loc_64D

	; Set key-off for all channels
	ld b, 7
	ld a, YM_KEYONOFF
	ld c, 0

	loc_65B:
		push af
		rst  j_writeDataToFM1
		inc  c
		pop  af
		djnz loc_65B

	pop af
	pop bc

	jp  loc_531
; ---------------------------------------------------------------------------

loc_666:                ; CODE XREF: sub_62D+6j
	xor a
	ld  (hl), a

	ld  a, (byte_1C0D)
	or  a
	jp  nz, initialize

	ld  ix, struct_1C70
	ld  b, 6

	loc_675:
		ld  a, (byte_1C11)
		or  a
		jr  nz, loc_681

		bit 7, (ix + NOTE.flags)
		jr  z, loc_687

	loc_681:
		ld  c, (ix + NOTE.byte_A)
		ld  a, YM_CHENABLE
		rst j_writeFMRegisters

	loc_687:
		; Advance to the next object
		ld  de, NOTE.size
		add ix, de
		djnz    loc_675

	ld  ix, struct_1D90
	ld  b, 5

	loc_694:
		bit 7, (ix + NOTE.flags)
		jr  z, loc_6A0

		ld  c, (ix + NOTE.byte_A)
		ld  a, YM_CHENABLE
		rst j_writeFMRegisters

	loc_6A0:
		; Advance to the next object
		ld  de, NOTE.size
		add ix, de
		djnz    loc_694

	ret
; End of function sub_62D

; ---------------------------------------------------------------------------
loc_6A8:
	ld a, 18h
	ld (1C0Dh), a

	ld a, 2
	ld (1C0Fh), a
	ld (1C0Eh), a

; =============== S U B R O U T I N E =======================================


sub_6B5:                ; CODE XREF: sub_6BC+6p
	xor a
	ld (struct_1C40), a
	jp loc_531
; End of function sub_6B5


; =============== S U B R O U T I N E =======================================


sub_6BC:                ; CODE XREF: sub_6B+6p
	; Return if byte_1C0D is zero
	ld  hl, byte_1C0D
	ld  a, (hl)
	or  a
	ret z

	; If byte_1C0D is negative
	call m, sub_6B5

	res 7, (hl)

	ld  a, (1C0Fh)
	dec a
	jr  z, loc_6D1

	ld  (1C0Fh), a

	ret
; ---------------------------------------------------------------------------

loc_6D1:                ; CODE XREF: sub_6BC+Fj
	ld  a, (1C0Eh)
	ld  (1C0Fh), a

	; Decrement byte_1C0D
	ld  a, (byte_1C0D)
	dec a
	ld  (byte_1C0D), a

	jr  z, initialize
	ld  ix, struct_1C40
	ld  b, 8

	loc_6E6:                ; CODE XREF: sub_6BC+49j
		inc (ix + NOTE.byte_6)
		jp  p, loc_6F1

		dec (ix + NOTE.byte_6)
		jr  loc_700
	; ---------------------------------------------------------------------------

	loc_6F1:                ; CODE XREF: sub_6BC+2Dj
		bit 7, (ix + NOTE.flags)
		jr  z, loc_700

		bit 2, (ix + NOTE.flags)
		jr  nz, loc_700

		call    sub_B67

	loc_700:                ; CODE XREF: sub_6BC+33j sub_6BC+39j ...
		ld  de, NOTE.size
		add ix, de
		djnz    loc_6E6

	ret
; End of function sub_6BC


; =============== S U B R O U T I N E =======================================


initialize:                ; CODE XREF: ROM:0062p sub_48E+5j ...
	; Clear out a bunch of RAM (1C09h - 1E80h)
	ld hl, flags_1C09
	ld de, CMD_BUFFER
	ld bc, 630
	ld (hl), 0
	ldir

	; Set up the main index register
	ld ix, data_537

	; Turn off all 6 FM channels
	ld b, 6
	loc_71B:
		push bc

		call muteChannel
		call disableSSG

		; Go to the next channel
		inc ix
		inc ix

		pop  bc
		djnz loc_71B

	ld  b, 7

	xor a
	ld  (byte_1C0D), a

loc_72F:                ; CODE XREF: sub_48E+102p sub_7F5+62p
	; Set CH3/6 to normal mode, enable timers A and B
	ld  a, 0Fh
	ld  (timerStatus), a
	ld  c, a

	ld  a, YM_TMRCTRL
	rst j_writeDataToFM1

	jp  loc_531
; End of function initialize


; =============== S U B R O U T I N E =======================================


disableSSG:                ; CODE XREF: sub_48E+140p initialize+17p
	ld a, YM_SSG
	ld c, 0
	jp writeToAllOperators
; End of function disableSSG


; =============== S U B R O U T I N E =======================================


sub_742:                ; CODE XREF: sub_6B+3p
	ld  hl, byte_1C13
	ld  a, (hl)
	or  a
	ret z

	dec (hl)
	ret nz

	ld a, (byte_1C14)
	ld (hl), a

	ld hl, tbl_1C4B
	ld de, NOTE.size

	ld b, 7
	loc_756:
		inc (hl)
		add hl, de
		djnz loc_756

	ret
; End of function sub_742


; =============== S U B R O U T I N E =======================================


sub_75B:                ; CODE XREF: ROM:0066p
	; Store the refresh counter
	ld a, r
	ld (refreshCount), a

	; Load address of command buffer
	ld de, CMD_BUFFER

	; Process commands
	call process_command
	call process_command
; End of function sub_75B


; =============== S U B R O U T I N E =======================================


process_command:
	; Read command buffer
	ld a, (de)

	; Return if bit 7 is 0
	bit 7, a
	ret z

	; Set register C to 0
	ld c, 0

	; Skip down if command byte less than 0x90
	cp 90h
	jr c, loc_777   ; Jump if carry bit set

	sub 0Fh
	ld  c, 12h

loc_777:
	sub 81h
	ld  hl, PROG2_START
	rst sub_20

	ld  c, a
	ld  b, 0
	add hl, bc
	ld  a, (byte_1C18)
	cp  (hl)
	jr  z, loc_789
	jr  nc, loc_793

loc_789:
	ld  a, (de)
	ld  (flags_1C09), a
	ld  a, (hl)
	and 7Fh
	ld  (byte_1C18), a

loc_793:
	; Zero out the command byte
	xor a
	ld  (de), a

	; Go on to the next byte in the buffer
	inc de
	ret
; End of function process_command


; =============== S U B R O U T I N E =======================================


muteChannel:                ; CODE XREF: initialize+14p
	call muteSustain

	; Set the TL (attenuation) to mute the channel
	ld   a, YM_TL
	ld   c, 7Fh
	call writeToAllOperators

	ld   c, (ix + 1)
	jp   setKeyOnOff
; End of function muteChannel


; =============== S U B R O U T I N E =======================================


muteSustain:                ; CODE XREF: muteChannelp
	ld  a, YM_D1L_RR
	ld  c, 0FFh
; End of function muteSustain


; =============== S U B R O U T I N E =======================================


writeToAllOperators:        ; CODE XREF: disableSSG+4j muteChannel+7p
	ld b, 4
	loc_7AD:
		push af
		rst  j_writeFMRegisters
		pop  af

		; Go to next operator
		add  a, 4
		djnz loc_7AD
	ret
; End of function writeToAllOperators

; ---------------------------------------------------------------------------
data_7B5:
	db 0B0h

	db  30h
	db  38h
	db  34h
	db  3Ch

	db  50h
	db  58h
	db  54h
	db  5Ch

	db  60h
	db  68h
	db  64h
	db  6Ch

	db  70h
	db  78h
	db  74h
	db  7Ch

	db  80h
	db  88h
	db  84h
	db  8Ch

data_7CA:
	db YM_TL + CHAOP1
	db YM_TL + CHAOP3
	db YM_TL + CHAOP2
	db YM_TL + CHAOP4

data_7CE:
	db YM_SSG + CHAOP1
	db YM_SSG + CHAOP3
	db YM_SSG + CHAOP2
	db YM_SSG + CHAOP4

data_7D2:
	db 0ADh
	db 0AEh
	db 0ACh
	db 0A6h

data_7D6:
	dw 284h
	dw 2ABh
	dw 2D3h
	dw 2FEh
	dw 32Dh
	dw 35Ch
	dw 38Fh
	dw 3C5h
	dw 3FFh
	dw 43Ch
	dw 47Ch
	dw 4C0h

; =============== S U B R O U T I N E =======================================


sub_7EE:                ; CODE XREF: sub_6B+1Bp
	call sub_271
	call z, sub_7F5
	ret
; End of function sub_7EE


; =============== S U B R O U T I N E =======================================


sub_7F5:                ; CODE XREF: sub_7EE+3p
	ld  e, (ix + 3)
	ld  d, (ix + 4)
	ld  a, (de)
	inc de
	cp  0E0h
	jp  nc, loc_86E

	or  a
	jp  m, loc_80A

	dec de
	ld  a, (ix + 0Dh)

loc_80A:                ; CODE XREF: sub_7F5+Ej
	ld (ix + 0Dh), a
	cp 80h
	jp z, loc_85B

	push de

	ld  hl, 1D60h
	bit 2, (hl)
	jr  nz, loc_85A

	ex  af, af'
	call sub_3C8
	ex  af, af'

	ld de, data_86B
	ex de, hl
	ldi
	ldi
	ldi

	dec a
	ld  hl, addr_878
	rst dereferenceWithWordCount

	ld bc, 6
	ldir

	call sub_5FC

	ld  hl, 1D65h
	ld  a, (ix + 5)
	add a, (hl)
	ld  (hl), a
	ld  a, (1D68h)
	ld  hl, data_88C
	rst dereferenceWithWordCount

	ld  a, (1D66h)
	ld  e, (ix + 6)
	push    de
	add a, e
	ld  (ix + 6), a
	call    sub_469

	pop de
	ld  (ix + 6), e
	call    loc_72F

loc_85A:                ; CODE XREF: sub_7F5+23j
	pop de

loc_85B:                ; CODE XREF: sub_7F5+1Aj
	ld  a, (de)
	inc de
	or  a
	jp  p, loc_1E3

	dec de
	ld  a, (ix + 0Ch)
	ld  (ix + 0Bh), a
	jp  loc_1E9
; ---------------------------------------------------------------------------
data_86B:
	db  80h
	db    2
	db    1
; ---------------------------------------------------------------------------

loc_86E:                ; CODE XREF: sub_7F5+Aj
	ld  hl, 874h
	jp  loc_999
; ---------------------------------------------------------------------------
	db  13h
	db 0C3h
	db 0FBh
	db    7

addr_878:
	dw data_898
	dw data_8BA
	dw data_8DE
	dw data_8E7
	dw data_8FB
	dw data_91D
	dw data_8F2
	dw data_93F
	dw data_948
	dw data_96F

data_88C:
	db 0A1h
	db    8
	db 0C5h
	db    8
	db    4
	db    9
	db  26h
	db    9
	db  56h
	db    9
	db  7Dh
	db    9

data_898:
	db  9Eh
	db    8
	db    0
	db    6
	db    0
	db    0
	db 0B4h
	db  10h
	db 0F2h
	db  3Ch
	db  0Fh
	db    0
	db    0
	db    0
	db  1Fh
	db  1Ah
	db  18h
	db  1Ch
	db  17h
	db  11h
	db  1Ah
	db  0Eh
	db    0
	db  0Fh
	db  14h
	db  10h
	db  1Fh
	db 0ECh
	db 0FFh
	db 0FFh
	db    7
	db  80h
	db  16h
	db  80h

data_8BA:
	db 0C0h
	db    8
	db    0
	db  0Ch
	db    1
	db    1
	db 0E0h
	db  80h
	db 0B6h
	db  0Ah
	db 0F2h
	db  3Eh
	db  60h
	db  30h
	db  30h
	db  30h
	db  19h
	db  1Fh
	db  1Fh
	db  1Fh
	db  15h
	db  11h
	db  11h
	db  0Ch
	db  10h
	db  0Ah
	db    6
	db    9
	db  4Fh
	db  5Fh
	db 0AFh
	db  8Fh
	db    0
	db  82h
	db  83h
	db  80h

data_8DE:
	db 0E4h
	db    8
	db    0
	db  0Ch
	db    1
	db    1
	db 0B3h
	db  0Ah
	db 0F2h

data_8E7:
	db 0EDh
	db    8
	db    0
	db  0Ch
	db    1
	db    1
	db 0E0h
	db  40h
	db 0B0h
	db  0Ah
	db 0F2h

data_8F2:
	db 0F8h
	db    8
	db    0
	db  0Ch
	db    1
	db    1
	db 0B2h
	db  0Ah
	db 0F2h

data_8FB:
	db    1
	db    9
	db    0
	db  0Ah
	db    1
	db    2
	db  8Fh
	db    8
	db 0F2h
	db  3Ch
	db    0
	db    0
	db    0
	db    0
	db  1Fh
	db  1Fh
	db  1Fh
	db  1Fh
	db    0
	db  16h
	db  0Fh
	db  0Fh
	db    0
	db    0
	db    0
	db    0
	db  0Fh
	db 0AFh
	db 0FFh
	db 0FFh
	db    0
	db  85h
	db  0Ah
	db  80h

data_91D:
	db  23h
	db    9
	db    0
	db    6
	db    1
	db    3
	db 0B0h
	db  16h
	db 0F2h
	db  72h
	db  9Eh
	db  5Bh
	db  42h
	db  22h
	db  96h
	db  96h
	db  9Eh
	db  96h
	db  16h
	db  18h
	db  16h
	db  18h
	db  10h
	db  17h
	db  11h
	db  18h
	db  4Fh
	db  5Fh
	db  4Fh
	db  4Fh
	db    0
	db    0
	db  10h
	db  80h

data_93F:
	db  45h
	db    9
	db    0
	db  0Eh
	db    1
	db    1
	db 0B9h
	db  10h
	db 0F2h

data_948:
	db  4Eh
	db    9
	db 0F7h
	db  0Ah
	db    0
	db    4
	db 0FEh
	db    3
	db    0
	db    0
	db    0
	db  95h
	db  20h
	db 0F2h
	db  3Ch
	db  0Ah
	db  50h
	db  70h
	db    0
	db  1Fh
	db  17h
	db  19h
	db  1Dh
	db  1Dh
	db  15h
	db  1Ah
	db  17h
	db    6
	db  18h
	db    7
	db  19h
	db  0Fh
	db  5Fh
	db  6Fh
	db  1Fh
	db  0Ch
	db  95h
	db    0
	db  8Eh

data_96F:
	db  75h
	db    9
	db    0
	db    7
	db    0
	db    5
	db 0FEh
	db    0
	db    3
	db    0
	db    3
	db 0D1h
	db    8
	db 0F2h
	db  3Dh
	db    0
	db  0Fh
	db  0Fh
	db  0Fh
	db  1Fh
	db  9Fh
	db  9Fh
	db  9Fh
	db  1Fh
	db  1Fh
	db  1Fh
	db  1Fh
	db    0
	db  0Eh
	db  10h
	db  0Fh
	db  0Fh
	db  4Fh
	db  4Fh
	db  4Fh
	db    0
	db  90h
	db  90h
	db  85h
; ---------------------------------------------------------------------------

loc_996:                ; CODE XREF: sub_150+12j
	ld  hl, 9A2h

loc_999:                ; CODE XREF: sub_7F5+7Cj
	push    hl
	sub 0E0h ; 'à'
	ld  hl, 9A6h
	rst dereferenceWithWordCount
	ld  a, (de)
	jp  (hl)
; End of function sub_7F5

; ---------------------------------------------------------------------------
		db  13h
		db 0C3h ; Ã
		db  5Eh ; ^
		db    1
		db  47h ; G
		db  0Bh
		db  76h ; v
		db  0Ah
		db  8Ah ; Š
		db  0Ah
		db 0ACh ; ¬
		db  0Ah
		db 0BCh ; ¼
		db  0Ah
		db  89h ; ‰
		db  0Ch
		db  61h ; a
		db  0Bh
		db 0CFh ; Ï
		db  0Ah
		db 0B2h ; ²
		db  0Ah
		db  58h ; X
		db  0Bh
		db  9Fh ; Ÿ
		db  0Ch
		db  9Fh ; Ÿ
		db  0Ch
		db  9Fh ; Ÿ
		db  0Ch
		db  8Eh ; Ž
		db  0Ah
		db  93h ; “
		db  0Ah
		db  12h
		db  0Bh
		db  9Eh ; ž
		db  0Ah
		db  9Fh ; Ÿ
		db  0Ch
		db 0BFh ; ¿
		db  0Bh
		db  9Fh ; Ÿ
		db  0Ch
		db  91h ; ‘
		db  0Bh
		db  9Fh ; Ÿ
		db  0Ch
		db  95h ; •
		db  0Bh
		db  72h ; r
		db  0Ch
		db  45h ; E
		db  0Ch
		db  5Fh ; _
		db  0Ch
		db  8Dh ; 
		db  0Bh
		db  86h ; †
		db  0Bh
		db  9Bh ; ›
		db  0Bh
		db 0B1h ; ±
		db  0Bh
		db 0D5h ; Õ
		db  0Ah
		db 0F6h ; ö
		db    9
		db  9Fh ; Ÿ
		db  0Ch
		db  83h ; ƒ
		db  0Ah
		db  25h ; %
		db  0Ah
		db  2Dh ; -
		db  0Ah
		db  68h ; h
		db  0Ah
		db  16h
		db  0Ah
		db 0FDh ; ý
		db    9
		db  7Ah ; z
		db  0Ah
		db  21h ; !
		db 0E6h ; æ
		db    9
		db 0EFh ; ï
		db  13h
		db  1Ah
		db 0E9h ; é
		db 0DDh ; Ý
		db  36h ; 6
		db  18h
		db  80h ; €
		db 0DDh ; Ý
		db  73h ; s
		db  19h
		db 0DDh ; Ý
		db  72h ; r
		db  1Ah

sub_A07:
	ld hl, data_7CE
	ld b, 4
	loc_A0C:
		ld  a, (de)
		inc de
		ld  c, a

		ld  a, (hl)
		inc hl

		rst  j_writeFMRegisters
		djnz loc_A0C

	dec de
	ret

		db 0D9h ; Ù
		db    6
		db    7
		db  11h
		db  30h ; 0
		db    0
		db  21h ; !
		db  42h ; B
		db  1Ch
		db  77h ; w
		db  19h
		db  10h
		db 0FCh ; ü
		db 0D9h ; Ù
		db 0C9h ; É
		db 0DDh ; Ý
		db 0E5h ; å
		db 0CDh ; Í
		db  91h ; ‘
		db    4
		db 0DDh ; Ý
		db 0E1h ; á
		db 0C9h ; É
		db  32h ; 2
		db  11h
		db  1Ch
		db 0B7h ; ·
		db  28h ; (
		db  1Dh
		db 0DDh ; Ý
		db 0E5h ; å
		db 0D5h ; Õ
		db 0DDh ; Ý
		db  21h ; !
		db  40h ; @
		db  1Ch
		db    6
		db    7
		db  11h
		db  30h ; 0
		db    0
		db 0DDh ; Ý
		db 0CBh ; Ë
		db    0
		db 0BEh ; ¾
		db 0CDh ; Í
		db 0CEh ; Î
		db    3
		db 0DDh ; Ý
		db  19h
		db  10h
		db 0F5h ; õ
		db 0D1h ; Ñ
		db 0DDh ; Ý
		db 0E1h ; á
		db 0C3h ; Ã
		db  31h ; 1
		db    5
		db 0DDh ; Ý
		db 0E5h ; å
		db 0D5h ; Õ
		db 0DDh ; Ý
		db  21h ; !
		db  40h ; @
		db  1Ch
		db    6
		db    7
		db  11h
		db  30h ; 0
		db    0
		db 0DDh ; Ý
		db 0CBh ; Ë
		db    0
		db 0FEh ; þ
		db 0DDh ; Ý
		db  19h
		db  10h
		db 0F8h ; ø
		db 0D1h ; Ñ
		db 0DDh ; Ý
		db 0E1h ; á
		db 0C9h ; É
		db 0EBh ; ë
		db  5Eh ; ^
		db  23h ; #
		db  56h ; V
		db  23h ; #
		db  4Eh ; N
		db    6
		db    0
		db  23h ; #
		db 0EBh ; ë
		db 0EDh ; í
		db 0B0h ; °
		db  1Bh
		db 0C9h ; É
		db 0DDh ; Ý
		db  77h ; w
		db  10h
		db 0C9h ; É
		db 0DDh ; Ý
		db  77h ; w
		db  18h
		db  13h
		db  1Ah
		db 0DDh ; Ý
		db  77h ; w
		db  19h
		db 0C9h ; É
		db  21h ; !
		db  14h
		db  1Ch
		db  77h ; w
		db  2Bh ; +
		db  77h ; w
		db 0C9h ; É
		db  32h ; 2
		db  16h
		db  1Ch
		db 0C9h ; É
		db 0CDh ; Í
		db  98h ; ˜
		db  0Ah
		db 0D7h ; ×
		db 0C9h ; É
		db 0CDh ; Í
		db  98h ; ˜
		db  0Ah
		db 0DFh ; ß
		db 0C9h ; É
		db 0EBh ; ë
		db  7Eh ; ~
		db  23h ; #
		db  4Eh ; N
		db 0EBh ; ë
		db 0C9h ; É
		db 0DDh ; Ý
		db  73h ; s
		db  20h
		db 0DDh ; Ý
		db  72h ; r
		db  21h ; !
		db 0DDh ; Ý
		db  36h ; 6
		db    7
		db  80h ; €
		db  13h
		db  13h
		db  13h
		db 0C9h ; É
		db 0CDh ; Í
		db  97h ; —
		db    7
		db 0C3h ; Ã
		db 0BFh ; ¿
		db  0Bh
		db 0CDh ; Í
		db  0Bh
		db    2
		db 0DDh ; Ý
		db  77h ; w
		db  1Eh
		db 0DDh ; Ý
		db  77h ; w
		db  1Fh
		db 0C9h ; É
		db 0DDh ; Ý
		db 0E5h ; å
		db 0E1h ; á
		db    1
		db  11h
		db    0
		db    9
		db 0EBh ; ë
		db    1
		db    5
		db    0
		db 0EDh ; í
		db 0B0h ; °
		db  3Eh ; >
		db    1
		db  12h
		db 0EBh ; ë
		db  1Bh
		db 0C9h ; É
		db 0DDh ; Ý
		db 0CBh ; Ë
		db    0
		db 0CEh ; Î
		db  1Bh
		db 0C9h ; É
		db 0DDh ; Ý
		db  7Eh ; ~
		db    1
		db 0FEh ; þ
		db    2
		db  20h
		db  2Ah ; *
		db 0DDh ; Ý
		db 0CBh ; Ë
		db    0
		db 0C6h ; Æ
		db 0D9h ; Ù
		db 0CDh ; Í
		db  40h ; @
		db    1
		db    6
		db    4
		db 0C5h ; Å
		db 0D9h ; Ù
		db  1Ah
		db  13h
		db 0D9h ; Ù
		db  21h ; !
		db  0Ah
		db  0Bh
		db  87h ; ‡
		db  4Fh ; O
		db    6
		db    0
		db    9
		db 0EDh ; í
		db 0A0h ;  
		db 0EDh ; í
		db 0A0h ;  
		db 0C1h ; Á
		db  10h
		db 0ECh ; ì
		db 0D9h ; Ù
		db  1Bh
		db  3Eh ; >
		db  4Fh ; O

sub_AFE:
	ld (timerStatus), a
	ld c, a
	ld a, YM_TMRCTRL
	rst j_writeDataToFM1
	ret

sub_B06:
	inc de
	inc de
	inc de
	ret

		db    0
		db    0
		db  32h ; 2
		db    1
		db  8Eh ; Ž
		db    1
		db 0E4h ; ä
		db    1
		db 0CDh ; Í
		db 0A7h ; §
		db    7
		db  1Ah
		db 0DDh ; Ý
		db  77h ; w
		db    8
		db 0B7h ; ·
		db 0F2h ; ò
		db  3Dh ; =
		db  0Bh
		db  13h
		db  1Ah
		db 0DDh ; Ý
		db  77h ; w
		db  0Fh

sub_B22:
	push de
	ld hl, PROG2_START
	ld c, 4
	ld a, (ix + 15)
	sub 81h
	call loc_23

	rst dereferenceWithWordCount
	rst dereferencePointer
	ld a, (ix + 8)
	and 7Fh
	ld b, a
	call loc_434
	jr loc_B42

	push de
	ld b, a
	call sub_425

loc_B42:
	call sub_469
	pop de
	ret

; =============== S U B R O U T I N E =======================================


sub_B47:                ; CODE XREF: sub_215+3Dp
	ld  c, 3Fh
	ld  a, (ix + NOTE.byte_A)
	and c
	ex  de, hl
	or  (hl)
	ld  (ix + NOTE.byte_A), a

	ld  c, a
	ld  a, YM_CHENABLE
	rst j_writeFMRegisters
	ex  de, hl
	ret
; End of function sub_B47

; ---------------------------------------------------------------------------
	db  4Fh
	db  3Eh
	db  22h
	db 0DFh
	db  13h
	db  0Eh
	db 0C0h
	db  18h
	db 0E8h
	db 0DDh
	db  86h
	db    6
	db 0DDh
	db  77h
	db    6

; =============== S U B R O U T I N E =======================================


sub_B67:                ; CODE XREF: sub_469+1Cj sub_6BC+41p
	exx

	ld de, data_7CA
	ld l, (ix + NOTE.addrlo_1C)
	ld h, (ix + NOTE.addrhi_1D)

	ld b, 4
	loc_B73:
		ld a, (hl)
		or a
		jp p, loc_B7B

		add a, (ix + NOTE.byte_6)

	loc_B7B:
		and 7Fh

		ld  c, a
		ld  a, (de)
		rst j_writeFMRegisters

		inc  de
		inc  hl
		djnz loc_B73

	exx
	ret
; End of function sub_B67


; =============== S U B R O U T I N E =======================================


sub_B86:
	add a, (ix + 5)
	ld  (ix + 5), a
	ret
; End of function sub_B86


; =============== S U B R O U T I N E =======================================


sub_B8D:
	ld (ix + 2), a
	ret
; End of function sub_B8D


; =============== S U B R O U T I N E =======================================


sub_B91:
	ld (ix + 7), a
	ret
; End of function sub_B91


; =============== S U B R O U T I N E =======================================


sub_B95:                ; CODE XREF: sub_C89+13j
	ex  de, hl
	ld  e, (hl)
	inc hl
	ld  d, (hl)
	dec de
	ret
; End of function sub_B95


; =============== S U B R O U T I N E =======================================


sub_B9B:
	cp 1
	jr nz, loc_BA4

	set 5, (ix + 0)
	ret
; ---------------------------------------------------------------------------

loc_BA4:                ; CODE XREF: sub_B9B+2j
	res 1, (ix + 0)
	res 5, (ix + 0)

	xor a
	ld  (ix + 10h), a
	ret
; End of function sub_B9B


; =============== S U B R O U T I N E =======================================


sub_BB1:
	cp 1
	jr nz, loc_BBA

	set 3, (ix + 0)
	ret
; ---------------------------------------------------------------------------

loc_BBA:                ; CODE XREF: sub_BB1+2j
	res 3, (ix + 0)
	ret
; End of function sub_BB1

; ---------------------------------------------------------------------------
sub_BBF:
	res 7, (ix + 0)
	ld a, 1Fh
	ld (1C15h), a
	ld      c, (ix + NOTE.channel)
	call    setKeyOnOff

	push    ix
	call    setIndexRegisters

	ld      a, (1C19h)
	or      a
	jr      z, loc_C40

	xor     a
	ld      (1C18h), a
	bit     7, (iy + 0)
	jr      z, loc_BF5

	ld      a, (ix + NOTE.channel)
	cp      (iy + 1)
	jr      nz, loc_BF5

	push    iy
	ld      l, (iy + 2Ah)
	ld      h, (iy + 2Bh)
	jr      loc_BFD

loc_BF5:
	push hl
	ld hl, (1C37h)
	res 2, (iy + 0)

loc_BFD:
	pop ix
	res 2, (ix + NOTE.flags)
	bit 7, (ix + NOTE.flags)
	jr z, loc_C40

	ld a, 2
	cp (ix + NOTE.channel)
	jr nz, loc_C1D

	ld a, 4Fh
	bit 0, (ix + NOTE.flags)
	jr nz, loc_C1A

	and 0Fh

loc_C1A:
	call sub_AFE

loc_C1D:
	ld a, (ix + NOTE.byte_8)
	or a
	jp p, loc_C29

	call sub_B22
	jr loc_C3D

loc_C29:
	ld b, a
	call loc_434
	call sub_469

	ld a, (ix + NOTE.byte_18)
	or a
	jp p, loc_C40
	ld e, (ix + NOTE.byte_19)
	ld d, (ix + NOTE.byte_1A)

loc_C3D:
	call sub_A07

loc_C40:
	pop ix
	pop hl
	pop hl
	ret

		db  4Fh ; O
		db  13h
		db  1Ah
		db  47h ; G
		db 0C5h ; Å
		db 0DDh ; Ý
		db 0E5h ; å
		db 0E1h ; á
		db 0DDh ; Ý
		db  35h ; 5
		db    9
		db 0DDh ; Ý
		db  4Eh ; N
		db    9
		db 0DDh ; Ý
		db  35h ; 5
		db    9
		db    6
		db    0
		db    9
		db  72h ; r
		db  2Bh ; +
		db  73h ; s
		db 0D1h ; Ñ
		db  1Bh
		db 0C9h ; É
		db 0DDh ; Ý
		db 0E5h ; å
		db 0E1h ; á
		db 0DDh ; Ý
		db  4Eh ; N
		db    9
		db    6
		db    0
		db    9
		db  5Eh ; ^
		db  23h ; #
		db  56h ; V
		db 0DDh ; Ý
		db  34h ; 4
		db    9
		db 0DDh ; Ý
		db  34h ; 4
		db    9
		db 0C9h ; É
		db  13h
		db 0C6h ; Æ
		db  28h ; (
		db  4Fh ; O
		db    6
		db    0
		db 0DDh ; Ý
		db 0E5h ; å
		db 0E1h ; á
		db    9
		db  7Eh ; ~
		db 0B7h ; ·
		db  20h
		db    2
		db  1Ah
		db  77h ; w
		db  13h
		db  35h ; 5
		db 0C2h ; Â
		db  95h ; •
		db  0Bh
		db  13h
		db 0C9h ; É

; =============== S U B R O U T I N E =======================================


sub_C89:
	inc de
	add a, 28h
	ld  c, a
	ld  b, 0
	push ix

	pop hl
	add hl, bc
	ld  a, (hl)
	dec a
	jp  z, loc_C9A

	inc de
	ret
; ---------------------------------------------------------------------------

loc_C9A:                ; CODE XREF: sub_C89+Cj
	xor a
	ld  (hl), a
	jp  sub_B95

	ret
; End of function sub_C89

	.end _PROG0
